<?xml version="1.0" encoding="utf-8" ?>
<Datatable xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	
	<!-- ELCP: a simple wait order-->
	<AIArmyMissionDefinition Name="ELCPWait">
		<Controller_Sequence Debug="ELCPWait">
			<Decorator_Successor />
		</Controller_Sequence>
	</AIArmyMissionDefinition>
	
	<!-- ELCP: New Tree for hunting ruins-->
	<AIArmyMissionDefinition Name="HuntRuin">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$RuinToVisit"/>
		</Parameters>
		<Controller_Sequence Debug="HuntRuin_Root">
			
			<!-- If army locked, wait some.-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_GetTargetPosition TargetVarName="$RuinToVisit" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector>
				<Include SubTreeName="ExploreNearbyRuin"/>
				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>
				</Include>
				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>

				<Controller_Sequence Debug="Explore_Target">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$RuinToVisit"/>
				</Controller_Sequence>
								
				<Controller_Sequence Debug="MoveToTarget">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$RuinPath" AllowFastTravel="true"/>
					<Action_Move PathVarName="$RuinPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$RuinPath"/>
					<!--<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$RuinToVisit"/>-->
				</Controller_Sequence>
			</Controller_Selector>			
		</Controller_Sequence>

	</AIArmyMissionDefinition>
	
	<!-- ELCP: New Tree for visiting predetermined quest ruins-->
	<AIArmyMissionDefinition Name="VisitQuestRuin">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$RegionIndex"/>
			<Parameter ParameterIndex="1" VarName="$RuinToVisit"/>
		</Parameters>
		<Controller_Sequence Debug="ConvertVillage_Root">
			
			<!-- If army locked, wait some.-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_GetTargetPosition TargetVarName="$RuinToVisit" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector>
				<Controller_Sequence Debug="DefendIfStillAtHome">
					<Decorator_IsInOwnRegion Inverted="false"/>
					<Include SubTreeName="DefendBesiegedCities"/>
				</Controller_Sequence>
				
				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>

				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>
				</Include>
			
				<Controller_Sequence Debug="Explore_Target">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$RuinToVisit"/>
				</Controller_Sequence>
				
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>                
				</Include>
				
				<Decorator_WaitForAllies TargetVarName="$RuinToVisit" Output_LeaderVarName="$LeadingArmy"/>	
				<!-- follow the leader if we arent it -->
				<Controller_Sequence>
					<Decorator_VariableCheck VarName="$LeadingArmy" CheckOperation="Exists"/>
					<Decorator_GetTargetPosition TargetVarName="$LeadingArmy" Output_DestinationVarName="$LeaderDestination"/>
					<Action_GeneratePath DestinationVarName="$LeaderDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="MoveToTarget">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$RuinPath" AllowFastTravel="true"/>
					<Action_Move PathVarName="$RuinPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$RuinPath"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$RuinToVisit"/>
				</Controller_Sequence>
				
				<!--ELCP: LastResortRoaming if target is unreachable (locked in region) just roam around generally-->		
				<Controller_Sequence Debug="LastResortRoaming">
					<Decorator_GetTargetPosition TargetVarName="$Army" Output_DestinationVarName="$MyPosition"/>
					<Decorator_GetNextRoamingPosition PositionVarName="$MyPosition" Output_DestinationVarName="$BorderDestination" LastResort="true"/>
					<Action_GeneratePath DestinationVarName="$BorderDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path" TypeOfCheck="Regular"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>

	</AIArmyMissionDefinition>
	
	<!-- ELCP: New Tree for visiting predetermined quest ruins-->
	<AIArmyMissionDefinition Name="VisitQuestRuinFinal">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$RegionIndex"/>
			<Parameter ParameterIndex="1" VarName="$RuinToVisit"/>
		</Parameters>
		<Controller_Sequence Debug="ConvertVillage_Root">
			
		
			<!-- If army locked, wait some.-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_GetTargetPosition TargetVarName="$RuinToVisit" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector>				
				<Include SubTreeName="TryToAttackEnemyInRangeOrFlee"/>
			
				<Controller_Sequence Debug="Explore_Target">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$RuinToVisit"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="MoveToTarget">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$RuinPath" AllowFastTravel="true"/>
					<Action_Move PathVarName="$RuinPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$RuinPath"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$RuinToVisit"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>

	</AIArmyMissionDefinition>
	
	<!-- ELCP: Major Faction Variant of AttackArmy (with city defense and backup stuff)-->
	<AIArmyMissionDefinition Name="MajorFactionAttackArmy">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetArmy"/>
			<Parameter ParameterIndex="1" VarName="$RegionIndex"/>
		</Parameters>
		<Controller_Sequence Debug="AttackArmy_Root">

			<!--IF Army in under control THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetBesieging Inverted="true" TargetVarName="$Army"/>
			<Decorator_GetTargetPosition TargetVarName="$TargetArmy" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector Debug="AttackArmy_Selector">
                <Include SubTreeName="OptimizeArmyAttackPosition">
                    <VariableConverter ToVariable="$Target" FromVariable="$TargetArmy"/>
                </Include>
                                    
				<Controller_Sequence Debug="EngageArmy">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_ImmolateUnits TargetVarName="$TargetArmy" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
					<Action_Attack TargetVarName="$TargetArmy"/>
				</Controller_Sequence>
				
				<!--IF we could collect a map boost then change path -->
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="2"/>
				</Include>

				<!--IF EnnemyDetected AND I can defeat him THEN Engage him-->
				<Include SubTreeName="TryToAttackAllEnemiesInRangeOrIgnore"/>			
				
				<Include SubTreeName="OpportunityConvertVillage"/>

				<!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
				<Include SubTreeName="TryLuxuryTameNearbyKaiju"/>

				<!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyWildKaiju"/>

				<!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyTamedKaiju"/>

				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="2"/>                
				</Include>

				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="2"/>
				</Include>
				
				<Controller_Sequence Debug="MoveTowardArmy">
					<Controller_Selector>
						<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
						<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true" IgnoreArmies="true"/>
					</Controller_Selector>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_Attack TargetVarName="$TargetArmy"/>
				</Controller_Sequence>
				
				<Include SubTreeName="DefendBesiegedCities"/>
				<Include SubTreeName="DefendEndangeredCities"/>				
				
				<Controller_Sequence Debug="MajorFactionRoaming_Backup">
					<Controller_Selector>
						<Controller_Sequence Debug="MajorFactionRoaming_ChangeTarget">
							<Decorator_VariableCheck VarName="$RoamingDestination" CheckOperation="Exists"/>
							<Decorator_DestinationReached DestinationVarName="$RoamingDestination" TypeOfCheck="Regular"/>
							<Decorator_GetNextRoamingPosition TargetRegionVarName="$RegionIndex" Output_DestinationVarName="$RoamingDestination"/>
							<Action_GeneratePath DestinationVarName="$RoamingDestination" TypeOfPath="Regular" Output_PathVarName="$Path" AllowFastTravel="true"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="MajorFactionRoaming_GoToPreviousTarget">
							<Decorator_VariableCheck VarName="$RoamingDestination" CheckOperation="Exists"/>
							<Action_GeneratePath DestinationVarName="$RoamingDestination" TypeOfPath="Regular" Output_PathVarName="$Path" AllowFastTravel="true"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="MajorFactionRoaming_FirstTime">
							<Decorator_GetNextRoamingPosition TargetRegionVarName="$RegionIndex" Output_DestinationVarName="$RoamingDestination"/>
							<Action_GeneratePath DestinationVarName="$RoamingDestination" TypeOfPath="Regular" Output_PathVarName="$Path" AllowFastTravel="true"/>
						</Controller_Sequence>

					</Controller_Selector>

					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
					<Decorator_DestinationReached DestinationVarName="$RoamingDestination" TypeOfCheck="Regular"/>
				</Controller_Sequence>

			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>
	
	<AIArmyMissionDefinition Name="ELCPPeacefulPacify">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$Village"/>
		</Parameters>
		<Controller_Sequence Debug="PacifyVillage_Root">

			<!--IF Army locked (in battle) THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Village"/>
			<Decorator_GetTargetPosition TargetVarName="$Village" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector Debug="PacifyVillage_Root2">
				<Controller_Sequence Debug="TalkToVillage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_SearchInRuin TargetVarName="$Village"/>
				</Controller_Sequence>
				
				<Include SubTreeName="ParleyWithVillage"/>
				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--IF we could collect a map boost then change path -->
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>

				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>

				<!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
				<Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
				
				<!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyWildKaiju"/>

				<!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyTamedKaiju"/>
				
				<!--IF Stunned Kaiju Detected, and can cost tame, THEN tray to tame it-->
				<Include SubTreeName="TryTameNearbyStunnedKaiju"/>

				<!-- Move Toward village. -->
				<Controller_Selector Debug="PacifyVillage_MoveTowardVillageToEngage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>

					<Controller_Sequence Debug="PacifyVillage_MoveToward">
						<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" IgnoreArmies="true" AllowFastTravel="true"/>
						<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
						<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					</Controller_Sequence>										
				</Controller_Selector>
				
				<!--ELCP: LastResortRoaming if no valid path has been found-->		
				<Controller_Sequence Debug="LastResortRoaming">
					<Decorator_GetTargetPosition TargetVarName="$Army" Output_DestinationVarName="$MyPosition"/>
					<Decorator_GetNextRoamingPosition PositionVarName="$MyPosition" Output_DestinationVarName="$BorderDestination" LastResort="true"/>
					<Action_GeneratePath DestinationVarName="$BorderDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path" TypeOfCheck="Regular"/>
				</Controller_Sequence>
			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>
	
	<AIArmyMissionDefinition Name="VisitQuestVillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$Village"/>
		</Parameters>
		<Controller_Sequence Debug="PacifyVillage_Root">

			<!--IF Army locked (in battle) THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Village"/>
			<Decorator_GetTargetPosition TargetVarName="$Village" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector Debug="PacifyVillage_Root2">
				<Controller_Sequence Debug="TalkToVillage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_SearchInRuin TargetVarName="$Village" QuestVillage="true"/>
				</Controller_Sequence>
				
				<Include SubTreeName="ParleyWithVillage"/>
				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--IF we could collect a map boost then change path -->
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>

				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>

				<!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
				<Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
				
				<!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyWildKaiju"/>

				<!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyTamedKaiju"/>
				
				<!--IF Stunned Kaiju Detected, and can cost tame, THEN tray to tame it-->
				<Include SubTreeName="TryTameNearbyStunnedKaiju"/>

				<!-- Move Toward village. -->
				<Controller_Selector Debug="PacifyVillage_MoveTowardVillageToEngage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>

					<Controller_Sequence Debug="PacifyVillage_MoveToward">
						<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" IgnoreArmies="true" AllowFastTravel="true"/>
						<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
						<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					</Controller_Sequence>										
				</Controller_Selector>
				
				<!--ELCP: LastResortRoaming if no valid path has been found-->		
				<Controller_Sequence Debug="LastResortRoaming">
					<Decorator_GetTargetPosition TargetVarName="$Army" Output_DestinationVarName="$MyPosition"/>
					<Decorator_GetNextRoamingPosition PositionVarName="$MyPosition" Output_DestinationVarName="$BorderDestination" LastResort="true"/>
					<Action_GeneratePath DestinationVarName="$BorderDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path" TypeOfCheck="Regular"/>
				</Controller_Sequence>
			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>
	
	<AIArmyMissionDefinition Name="DismantleQuestDevice">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$Device"/>
		</Parameters>
		<Controller_Sequence Debug="DismantleQuestDevice_Root">

			<!--IF Army locked (in battle) THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_GetTargetPosition TargetVarName="$Device" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector Debug="DismantleQuestDevice_Root2">
			    <Decorator_IsArmyDestroyingCreepingNode TargetVarName="$Army"/>
				
				<Controller_Sequence Debug="DismantleDevice">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_ToggleDismantleDevice TargetVarName="$Device"/>
				</Controller_Sequence>
				
				<Include SubTreeName="ParleyWithVillage"/>
				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="2"/>
				</Include>

				<!--IF we could collect a map boost then change path -->
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="2"/>                
				</Include>

				<Include SubTreeName="TryToAttackEnemyInRangeOrFlee"/>

				<!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
				<Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
				
				<!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyWildKaiju"/>

				<!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyTamedKaiju"/>
				
				<!--IF Stunned Kaiju Detected, and can cost tame, THEN tray to tame it-->
				<Include SubTreeName="TryTameNearbyStunnedKaiju"/>

				<!-- Move Toward village. -->
				<Controller_Selector Debug="DismantleQuestDevice_MoveTowardVillageToEngage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>

					<Controller_Sequence Debug="DismantleQuestDevice_MoveToward">
						<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" IgnoreArmies="true" AllowFastTravel="true"/>
						<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
						<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					</Controller_Sequence>										
				</Controller_Selector>
				
				<!--ELCP: LastResortRoaming if no valid path has been found-->		
				<Controller_Sequence Debug="LastResortRoaming">
					<Decorator_GetTargetPosition TargetVarName="$Army" Output_DestinationVarName="$MyPosition"/>
					<Decorator_GetNextRoamingPosition PositionVarName="$MyPosition" Output_DestinationVarName="$BorderDestination" LastResort="true"/>
					<Action_GeneratePath DestinationVarName="$BorderDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path" TypeOfCheck="Regular"/>
				</Controller_Sequence>
				
				
			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>
	
</Datatable>
