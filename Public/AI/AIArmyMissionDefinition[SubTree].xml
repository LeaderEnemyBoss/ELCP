<?xml version="1.0" encoding="utf-8" ?>
<Datatable xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

	<AIArmyMissionDefinition Name="OpportunityPillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
			<Parameter ParameterIndex="1" VarName="$MainTargetPosition"/>
			<Parameter ParameterIndex="2" VarName="$OpportunityMaximumTurn"/>
		</Parameters>

		<!--IF we could Pillage something THEN try to pillage it -->
		<Controller_Selector Debug="Opportunity_Pillage">
			<Decorator_IsArmyPillaging TargetVarName="$Army"/>

			<Controller_Sequence Debug="Opportunity_LookOutForPillage" >
				<Decorator_SelectPillageTarget TargetListVarName="$TargetList"
                                       Output_TargetVarName="$PillageTarget"
                                       OpportunityMainTargetPosition="$MainTargetPosition"
                                       OpportunityMaximumTurnName="$OpportunityMaximumTurn"/>

				<Decorator_GetTargetPosition TargetVarName="$PillageTarget" Output_DestinationVarName="$PillageTargetWorldPositionDestination"/>

				<Controller_Selector>
					<Controller_Sequence Debug="Opportunity_Pillage_AlreadyAtDestination">
						<Decorator_DestinationReached DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfCheck="Attack"/>
						<Action_TogglePillage TargetVarName="$PillageTarget"/>
					</Controller_Sequence>

					<!-- Wait until we have ended the pillage! -->
					<Decorator_DestinationReached DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfCheck="Attack"/>

					<Controller_Sequence Debug="Opportunity_Pillage_MoveToTarget">
						<Action_GeneratePath DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$PillagePath"/>
						<Action_Move PathVarName="$PillagePath" TypeOfMove="Regular"/>
						<Decorator_MoveEnded PathVarName="$PillagePath"/>
					</Controller_Sequence>
				</Controller_Selector>
			</Controller_Sequence>
		</Controller_Selector>
	</AIArmyMissionDefinition>

	<AIArmyMissionDefinition Name="OpportunityPillageOrFlee">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
			<Parameter ParameterIndex="1" VarName="$MainTargetPosition"/>
			<Parameter ParameterIndex="2" VarName="$OpportunityMaximumTurn"/>
		</Parameters>

		<!--IF we could Pillage something THEN try to pillage it -->
		<Controller_Sequence>
			<Controller_Selector Debug="PillagingAndHeavyArmyComing">
				<!-- We are all right when there is no target around.-->
				<Decorator_SelectTarget Inverted="true" TargetListVarName="$TargetList" TypeOfTarget="Army" TypeOfDiplomaticRelation="DangerForMe" Output_TargetVarName="$Target"/>

				<!-- We are all right when there is a target but we are able to defeat it.-->
				<Decorator_CanDefeatTarget TargetVarName="$Target" EstimateBattlegound="true"/>
			</Controller_Selector>

			<!-- nothing to do! -->
			<Controller_Selector>
				<Decorator_IsArmyPillaging TargetVarName="$Army"/>

				<Controller_Sequence>
					<Decorator_SelectPillageTarget TargetListVarName="$TargetList"
                                         Output_TargetVarName="$PillageTarget"
                                         OpportunityMainTargetPosition="$MainTargetPosition"
                                         OpportunityMaximumTurnName="$OpportunityMaximumTurn"/>

					<Decorator_GetTargetPosition TargetVarName="$PillageTarget" Output_DestinationVarName="$PillageTargetWorldPositionDestination"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_Pillage_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfCheck="Attack"/>
							<Action_TogglePillage TargetVarName="$PillageTarget"/>
						</Controller_Sequence>

						<!-- Wait until we have ended the pillage! -->
						<Decorator_DestinationReached DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfCheck="Attack"/>

						<Controller_Sequence Debug="Opportunity_Pillage_MoveToTarget">
							<Action_GeneratePath DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$PillagePath"/>
							<Action_Move PathVarName="$PillagePath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$PillagePath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>

	<AIArmyMissionDefinition Name="TryAttackNearbyVillages">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>

		<Controller_Sequence Debug="TryAttackNearbyVillages_TryToAttackEnemyInRange">
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Village" Output_TargetVarName="$Target" TypeOfDiplomaticRelation="DangerForMe"/>
			<Decorator_CanDefeatTarget Inverted="false" TargetVarName="$Target"/>
			<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>

			<Controller_Selector Debug="TryAttackNearbyVillages_TryToAttackEnemyInRange_EnemyInRange">
				<Controller_Sequence Debug="TryAttackNearbyVillages_TryToAttackEnemyInRange_EnemyClose">
					<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Attack"/>
          <Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
					<Action_ShiftUnits TargetVarName="$Target"/>
					<Action_Attack TargetVarName="$Target"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="TryAttackNearbyVillages_TryToAttackEnemyInRange_GotoAndAttack">
					<Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
          <Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
					<Action_ShiftUnits TargetVarName="$Target"/>
					<Action_GotoAndAttack TargetVarName="$Target" PathVarName="$Path"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>

	<AIArmyMissionDefinition Name="OpportunityAttackNearbyVillages">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
			<Parameter ParameterIndex="1" VarName="$MainTargetPosition"/>
			<Parameter ParameterIndex="2" VarName="$OpportunityMaximumTurn"/>
			<Parameter ParameterIndex="3" VarName="$MainTargetType"/>
		</Parameters>

		<Controller_Sequence Debug="OpportunityAttackNearbyArmies_TryToAttackEnemyInRange">
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Village" TypeOfDiplomaticRelationVariableName="$TypeOfDiplomaticRelation" Output_TargetVarName="$Target"/>
			<Decorator_CanDefeatTarget Inverted="false" TargetVarName="$Target"/>
			<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>
			<Decorator_EvaluateOpportunity OpportunityPosition="$AttackWorldPositionDestination" 
                                     MaximumDetourTurnVariableName="$MaximumDetourTurn"
                                     MinimumTurnToObjectif="2"
                                     OpportunityType="Village" 
                                     MainTargetPosition="$MainTargetPosition" 
                                     MainTargetTypeVariableName="$MainTargetType"/>

			<Controller_Selector Debug="OpportunityAttackNearbyArmies_TryToAttackEnemyInRange_EnemyInRange">
				<Controller_Sequence Debug="OpportunityAttackNearbyArmies_TryToAttackEnemyInRange_EnemyClose">
					<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Attack"/>
          <Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
					<Action_ShiftUnits TargetVarName="$Target"/>
					<Action_Attack TargetVarName="$Target"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="OpportunityAttackNearbyArmies_TryToAttackEnemyInRange_GotoAndAttack">
					<Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
          <Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
					<Action_ShiftUnits TargetVarName="$Target"/>
					<Action_GotoAndAttack TargetVarName="$Target" PathVarName="$Path"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>

	<AIArmyMissionDefinition Name="OptimizeArmyAttackPosition">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$Target"/>
		</Parameters>

		<Controller_Sequence Debug="OptimizeCheck">
			<Decorator_OptimizeAttackPosition TargetVarName="$Target" Output_BestAttackPositionVarName="$BestAttackPosition"/>
			<Action_GeneratePath DestinationVarName="$BestAttackPosition" TypeOfPath="Regular" Output_PathVarName="$BetterPath"/>
			<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$BestAttackPosition" PathVarName="$BetterPath"/>
			<Action_GotoAndAttack TargetVarName="$Target" PathVarName="$BetterPath"/>
			<Decorator_MoveEnded PathVarName="$BetterPath"/>
		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<AIArmyMissionDefinition Name="OrbsOpportunity">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$MainTargetPosition"/>
			<Parameter ParameterIndex="1" VarName="$OpportunityMaximumTurn"/>
		</Parameters>

		<Controller_Sequence Debug="Orbs">
			<Decorator_SelectOrbSpawnTarget Output_TargetVarName="$OrbTarget" 
                                            OpportunityMaximumTurnName="$OpportunityMaximumTurn" 
                                            OpportunityMainTargetPosition="$MainTargetPosition"/>
			<Decorator_GetTargetPosition TargetVarName="$OrbTarget" Output_DestinationVarName="$OrbWorldPositionDestination"/>

			<Controller_Sequence Debug="Orb_MoveToOrb">
				<Action_GeneratePath DestinationVarName="$OrbWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$OrbPath"/>
				<Action_Move PathVarName="$OrbPath" TypeOfMove="Regular"/>
				<Decorator_MoveEnded PathVarName="$OrbPath"/>
			</Controller_Sequence>
		</Controller_Sequence>

	</AIArmyMissionDefinition>

  <AIArmyMissionDefinition Name="MapBoostOpportunity">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$MainTargetPosition"/>
      <Parameter ParameterIndex="1" VarName="$OpportunityMaximumTurn"/>
    </Parameters>

    <Controller_Sequence Debug="MapBoosts">
      <Decorator_SelectMapBoostSpawnTarget Output_TargetVarName="$MapBoostTarget"
                                            OpportunityMaximumTurnName="$OpportunityMaximumTurn"
                                            OpportunityMainTargetPosition="$MainTargetPosition"/>
      <Decorator_GetTargetPosition TargetVarName="$MapBoostTarget" Output_DestinationVarName="$MapBoostWorldPositionDestination"/>

      <Controller_Sequence Debug="MoveToMapBoost">
        <Action_GeneratePath DestinationVarName="$MapBoostWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
        <Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
        <Decorator_MoveEnded PathVarName="$Path"/>
      </Controller_Sequence>
    </Controller_Sequence>

  </AIArmyMissionDefinition>

	<AIArmyMissionDefinition Name="AspirateOpportunity">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
			<Parameter ParameterIndex="1" VarName="$MainTargetPosition"/>
			<Parameter ParameterIndex="2" VarName="$OpportunityMaximumTurn"/>
		</Parameters>

		<Controller_Sequence Debug="Aspirate">
			<Decorator_SelectAspirateTarget Output_TargetVarName="$ResourceTarget" 
                                          OpportunityMaximumTurnName="$OpportunityMaximumTurn" 
                                          OpportunityMainTargetPosition="$MainTargetPosition"/>

			<Decorator_GetTargetPosition TargetVarName="$ResourceTarget" Output_DestinationVarName="$ResourceWorldPositionDestination"/>

			<Controller_Selector>
				<Decorator_DestinationReached DestinationVarName="$ResourceWorldPositionDestination" TypeOfCheck="Regular"/>

				<Controller_Sequence Debug="Aspirate">
					<Action_GeneratePath DestinationVarName="$ResourceWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$ResourcePath"/>
					<Action_Move PathVarName="$ResourcePath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$ResourcePath"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>

	</AIArmyMissionDefinition>


	<AIArmyMissionDefinition Name="TryToAttackEnemyInRange">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>

		<!--IF EnnemyDetected THEN Engage him-->
		<Controller_Sequence Debug="TryToAttackEnemyInRange">

			<!-- First, select a target. -->
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Army" TypeOfDiplomaticRelation="Enemy" Output_TargetVarName="$Target"/>

			<Controller_Sequence>
				<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>

				<Controller_Selector Debug="TryToAttackEnemyInRange_EnemyInRange">
					<Include SubTreeName="OptimizeArmyAttackPosition"/>

					<Controller_Sequence Debug="TryToAttackEnemyInRange_EnemyClose">
						<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Attack"/>
						<Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
						<Action_ShiftUnits TargetVarName="$Target"/>
						<Action_Attack TargetVarName="$Target"/>
					</Controller_Sequence>

					<Controller_Sequence Debug="TryToAttackEnemyInRange_GotoAndAttack">
						<Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
						<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
						<Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
						<Action_ShiftUnits TargetVarName="$Target"/>
						<Action_GotoAndAttack TargetVarName="$Target" PathVarName="$Path"/>
						<Decorator_MoveEnded PathVarName="$Path"/>
					</Controller_Sequence>
				</Controller_Selector>
			</Controller_Sequence>
		</Controller_Sequence>
	</AIArmyMissionDefinition>

	<AIArmyMissionDefinition Name="TryToAttackEnemyInRangeOrFlee">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>

		<!--IF EnnemyDetected AND I can defeat him THEN Engage it -->
		<Controller_Sequence Debug="TryToAttackEnemyInRange">

			<!-- First, select a target. -->
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Army" TypeOfDiplomaticRelation="Enemy" Output_TargetVarName="$Target"/>

			<Controller_Selector>
				<Controller_Sequence>
					<!-- Check if we ca defeat this target. -->
					<Decorator_CanDefeatTarget Inverted="false" TargetVarName="$Target"/>
					<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>

					<Controller_Selector Debug="TryToAttackEnemyInRange_EnemyInRange">
					  <Include SubTreeName="OptimizeArmyAttackPosition"/>
						<Controller_Sequence Debug="TryToAttackEnemyInRange_EnemyClose">
							<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Attack"/>
							<Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
							<Action_ShiftUnits TargetVarName="$Target"/>
							<Action_Attack TargetVarName="$Target"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="TryToAttackEnemyInRange_GotoAndAttack">
							<Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
							<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
							<Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
							<Action_ShiftUnits TargetVarName="$Target"/>
							<Action_GotoAndAttack TargetVarName="$Target" PathVarName="$Path"/>
							<Decorator_MoveEnded PathVarName="$Path"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<!--IF EnnemyDetected AND I can not defeat him THEN retreat him-->
				<Controller_Sequence Debug="TryToRetreat">
					<Decorator_CanDefeatTarget Inverted="true" TargetVarName="$Target"/>
					<Decorator_ComputeSavingPosition TargetListVarName="$TargetList" Output_DestinationVarName="$SafeWorldPositionDestination"/>
					<Action_GeneratePath DestinationVarName="$SafeWorldPositionDestination" TypeOfPath="FuzzyDestination" Output_PathVarName="$SafePath"/>
					<Action_Move PathVarName="$SafePath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$SafePath"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>
	
	<AIArmyMissionDefinition Name="OpportunityConvertVillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>

		<!--IF valid Village detected THEN try to parley -->
		<Controller_Sequence Debug="Opportunity_ConvertVillage">
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Village" Output_TargetVarName="$Target" TypeOfDiplomaticRelation="VillageConvert"/>
			<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$ConvertPositionDestination"/>

			<Controller_Selector>            
				<Controller_Sequence Debug="OpportunityConvertVillage_AlreadyAtDestination">
					<Decorator_DestinationReached DestinationVarName="$ConvertPositionDestination" TypeOfCheck="Attack"/>
					<Action_ConvertVillage TargetVarName="$Target"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="OpportunityConvertVillage_MoveTo">
					<Action_GeneratePath DestinationVarName="$ConvertPositionDestination" TypeOfPath="Regular" Output_PathVarName="$ConvertPath"/>
					<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$ConvertPositionDestination" PathVarName="$ConvertPath"/>
					<Action_Move PathVarName="$ConvertPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$ConvertPath"/>
					<Action_ConvertVillage TargetVarName="$Target"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>
	
	<AIArmyMissionDefinition Name="OpportunitySearchRuin">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
			<Parameter ParameterIndex="1" VarName="$MainTargetPosition"/>
			<Parameter ParameterIndex="2" VarName="$OpportunityMaximumTurn"/>
		</Parameters>

		<!--IF RuinDetected THEN explore the ruin -->
		<Controller_Sequence Debug="Explore_SearchRuin">
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Ruin" Output_TargetVarName="$Target"/>
			<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$RuinWorldPositionDestination"/>
			<Decorator_EvaluateOpportunity OpportunityPosition="$RuinWorldPositionDestination" 
                                            MaximumDetourTurnVariableName="$OpportunityMaximumTurn"
                                            MinimumTurnToObjectif="2"
                                            OpportunityType="Ruin" 
                                            MainTargetPosition="$MainTargetPosition" 
                                            MainTargetTypeVariableName="$MainTargetType"/>

			<Controller_Selector>            
				<Controller_Sequence Debug="Explore_SearchRuin_AlreadyAtDestination">
					<Decorator_DestinationReached DestinationVarName="$RuinWorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$Target"/>
				</Controller_Sequence>
		
				<Controller_Sequence Debug="Explore_SearchRuin_DiveAtDestination">
					<Decorator_DestinationReached DestinationVarName="$RuinWorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_SearchInRuin TargetVarName="$Target"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="Explore_SearchRuin_MoveToRuin">
					<Action_GeneratePath DestinationVarName="$RuinWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$RuinPath"/>
					<Action_Move PathVarName="$RuinPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$RuinPath"/>
					<Action_SearchInRuin TargetVarName="$Target"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>
	
	
  <AIArmyMissionDefinition Name="TryAttackNearbyWildKaiju">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$TargetList"/>
    </Parameters>

    <Controller_Sequence Debug="TryAttackNearbyWildKaiju_TryToAttackKaijuInRange">
      <Decorator_IsEmpireControlledByAI Inverted="false"/>
      <Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="WildKaiju" Output_TargetVarName="$Target" TypeOfDiplomaticRelation="Any"/>
      <Decorator_CanDefeatTarget Inverted="false" TargetVarName="$Target"/>
      <Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>

      <Controller_Selector Debug="TryAttackNearbyWildKaiju_TryToAttackKaijuInRange_KaijuInRange">
        <Controller_Sequence Debug="TryAttackNearbyKaijus_TryToAttackKaijuInRange_KaijuClose">
          <Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Regular"/>
          <Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
          <Action_ShiftUnits TargetVarName="$Target"/>
          <Action_Attack TargetVarName="$Target"/>
        </Controller_Sequence>

        <Controller_Sequence Debug="TryAttackNearbyWildKaiju_TryToAttackKaijuInRange_GotoAndAttack">
          <Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
          <Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
          <Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
          <Action_ShiftUnits TargetVarName="$Target"/>
          <Action_GotoAndAttack TargetVarName="$Target" PathVarName="$Path"/>
          <Decorator_MoveEnded PathVarName="$Path"/>
        </Controller_Sequence>
      </Controller_Selector>
    </Controller_Sequence>
  </AIArmyMissionDefinition>

  <AIArmyMissionDefinition Name="TryAttackNearbyTamedKaiju">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$TargetList"/>
    </Parameters>

    <Controller_Sequence Debug="TryAttackNearbyTamedKaiju_TryToAttackKaijuInRange">
      <Decorator_IsEmpireControlledByAI Inverted="false"/>
      <Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="TamedKaiju" Output_TargetVarName="$Target" TypeOfDiplomaticRelation="Any"/>
      <Decorator_CanDefeatTarget Inverted="false" TargetVarName="$Target"/>
      <Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>

      <Controller_Selector Debug="TryAttackNearbyTamedKaiju_TryToAttackKaijuInRange_KaijuInRange">
        <Controller_Sequence Debug="TryAttackNearbyTamedKaijus_TryToAttackKaijuInRange_KaijuClose">
          <Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Regular"/>
          <Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
          <Action_ShiftUnits TargetVarName="$Target"/>
          <Action_Attack TargetVarName="$Target"/>
        </Controller_Sequence>

        <Controller_Sequence Debug="TryAttackNearbyTamedKaiju_TryToAttackKaijuInRange_GotoAndAttack">
          <Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
          <Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
          <Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
          <Action_ShiftUnits TargetVarName="$Target"/>
          <Action_GotoAndAttack TargetVarName="$Target" PathVarName="$Path"/>
          <Decorator_MoveEnded PathVarName="$Path"/>
        </Controller_Sequence>
      </Controller_Selector>
    </Controller_Sequence>
  </AIArmyMissionDefinition>

  <AIArmyMissionDefinition Name="TryTameNearbyStunnedKaiju">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$TargetList"/>
    </Parameters>

    <Controller_Sequence Debug="TryTameNearbyStunnedKaiju_TryToTameStunnedKaijuInRange">
      <Decorator_IsEmpireControlledByAI Inverted="false"/>
      <Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="StunnedKaiju" Output_TargetVarName="$Target" TypeOfDiplomaticRelation="Any"/>
      <Decorator_CanAffordArmyAction Inverted="false" ArmyActionReadOnlyName="ArmyActionTameKaiju" Output_ArmyActionVarName="$ArmyAction"/>
      <Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>

      <Controller_Selector Debug="TryTameNearbyStunnedKaiju_TryToTameStunnedKaijuInRange_KaijuInRange">
        <Controller_Sequence Debug="TryTameNearbyStunnedKaiju_TryToTameStunnedKaijuInRange_KaijuClose">
          <Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Attack"/>
          <Action_TameKaiju TargetVarName="$Target"/>
        </Controller_Sequence>

        <Controller_Sequence Debug="TryTameNearbyStunnedKaiju_TryToTameStunnedKaijuInRange_GotoAndAttack">
          <Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
          <Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
          <Action_GotoAndExecute ArmyActionVarName="$ArmyAction" TargetVarName="$Target" PathVarName="$Path"/>
          <Decorator_MoveEnded PathVarName="$Path"/>
        </Controller_Sequence>
      </Controller_Selector>
    </Controller_Sequence>
  </AIArmyMissionDefinition>
  
  <AIArmyMissionDefinition Name="TryLuxuryTameNearbyKaiju">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$TargetList"/>
    </Parameters>

    <Controller_Sequence Debug="TryLuxuryTameNearbyKaiju_TryToTameStunnedKaijuInRange">
      <Decorator_IsEmpireControlledByAI Inverted="false"/>
      <Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="WildKaiju" Output_TargetVarName="$Target" TypeOfDiplomaticRelation="Any"/>
      <Decorator_CanAffordArmyAction Inverted="false" ArmyActionReadOnlyName="ArmyActionTameUnstunnedKaiju" Output_ArmyActionVarName="$ArmyAction"/>
      <Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>

      <Controller_Selector Debug="TryLuxuryTameNearbyKaiju_KaijuInRange">
        <Controller_Sequence Debug="TryLuxuryTameNearbyKaiju_KaijuClose">
          <Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Regular"/>
          <Action_ExecuteArmyAction ArmyActionVarName="$ArmyAction" TargetVarName="$Target"/>
        </Controller_Sequence>

        <Controller_Sequence Debug="TryLuxuryTameNearbyKaiju_GotoAndAndExecuteArmyAction">
          <Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
          <Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
          <Action_GotoAndExecute ArmyActionVarName="$ArmyAction" TargetVarName="$Target" PathVarName="$Path"/>
          <Decorator_MoveEnded PathVarName="$Path"/>
        </Controller_Sequence>
      </Controller_Selector>
    </Controller_Sequence>
  </AIArmyMissionDefinition>


  <AIArmyMissionDefinition Name="OptimizeKaijuAttackPosition">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$Target"/>
    </Parameters>

    <Controller_Sequence Debug="OptimizeCheck">
      <Decorator_OptimizeAttackPosition TargetVarName="$Target" Output_BestAttackPositionVarName="$BestAttackPosition"/>
      <Action_GeneratePath DestinationVarName="$BestAttackPosition" TypeOfPath="Regular" Output_PathVarName="$BetterPath"/>
      <Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$BestAttackPosition" PathVarName="$BetterPath"/>
      <Action_GotoAndAttack TargetVarName="$Target" PathVarName="$BetterPath"/>
      <Decorator_MoveEnded PathVarName="$BetterPath"/>
    </Controller_Sequence>

  </AIArmyMissionDefinition>

  <AIArmyMissionDefinition Name="OpportunityDestroyCreepingNode">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$TargetList"/>
      <Parameter ParameterIndex="1" VarName="$MainTargetPosition"/>
      <Parameter ParameterIndex="2" VarName="$OpportunityMaximumTurn"/>
    </Parameters>

    <!--IF we could Pillage something THEN try to pillage it -->
    <Controller_Selector Debug="Opportunity_DestroyCreepingNode">
      <Decorator_IsArmyDestroyingCreepingNode TargetVarName="$Army"/>

      <Controller_Sequence Debug="Opportunity_LookOutForCreepingNode" >
        <Decorator_SelectCreepingNodeTarget TargetListVarName="$TargetList"
                                            Output_TargetVarName="$CreepingNodeTarget"
                                            OpportunityMainTargetPosition="$MainTargetPosition"
                                            OpportunityMaximumTurnName="$OpportunityMaximumTurn"/>

        <Decorator_GetTargetPosition TargetVarName="$CreepingNodeTarget" Output_DestinationVarName="$CreepingNodeTargetWorldPositionDestination"/>

        <Controller_Selector>
          <Controller_Sequence Debug="Opportunity_DestroyNode_AlreadyAtDestination">
            <Decorator_DestinationReached DestinationVarName="$CreepingNodeTargetWorldPositionDestination" TypeOfCheck="Regular"/>
            <Action_ToggleDismantleCreepingNode TargetVarName="$CreepingNodeTarget"/>
          </Controller_Sequence>

          <!-- Wait until we have ended -->
          <Decorator_DestinationReached DestinationVarName="$CreepingNodeTargetWorldPositionDestination" TypeOfCheck="Regular"/>

          <Controller_Sequence Debug="Opportunity_DestroyCreepingNode_MoveToTarget">
            <Action_GeneratePath DestinationVarName="$CreepingNodeTargetWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$NodePath"/>
            <Action_Move PathVarName="$NodePath" TypeOfMove="Regular"/>
            <Decorator_MoveEnded PathVarName="$NodePath"/>
          </Controller_Sequence>
        </Controller_Selector>
      </Controller_Sequence>
    </Controller_Selector>
  </AIArmyMissionDefinition>
	
	<!-- ELCP/LeaderEnemyBoss: new parley village subtree -->
	<!-- I modified the search ruin action to also work for accepting village quests (dont know how to create new BT-Actions yet) -->
	<AIArmyMissionDefinition Name="ParleyWithVillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>

		<!--IF valid Village detected THEN try to parley -->
		<Controller_Sequence Debug="Parley_Village">
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Village" Output_TargetVarName="$Target" TypeOfDiplomaticRelation="VillageQuest"/>
			<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$ParleyPositionDestination"/>

			<Controller_Selector>            
				<Controller_Sequence Debug="Parley_Village_AlreadyAtDestination">
					<Decorator_DestinationReached DestinationVarName="$ParleyPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$Target"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="Parley_Village_MoveToRuin">
					<Action_GeneratePath DestinationVarName="$ParleyPositionDestination" TypeOfPath="Regular" Output_PathVarName="$ParleyPath"/>
					<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$ParleyPositionDestination" PathVarName="$ParleyPath"/>
					<Action_Move PathVarName="$ParleyPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$ParleyPath"/>
					<Action_SearchInRuin TargetVarName="$Target"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>
	
	<!-- ELCP/LeaderEnemyBoss: new subtree for dynamic siege defending of warpatrols (including vaulter teleport!) -->
	<AIArmyMissionDefinition Name="DefendBesiegedCities">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetCity"/>
		</Parameters>
		<Controller_Selector Debug="DefendBesiegedCities_Selector">
			
			<!-- If we can teleport into the besieged city, go to the nearest unbesieged city and do that -->
			<Controller_Sequence Debug="DefendBesiegedCities_Teleport">
				<Decorator_SelectClosestBesiegedCity Inverted="false" Teleport="true" Output_TargetVarName="$TargetCity"/>
				<Decorator_SelectClosestBesiegedCity Inverted="true" Output_TargetVarName="$AlliedCity"/>
				<Decorator_GetTargetPosition TargetVarName="$AlliedCity" Output_DestinationVarName="$AlliedCityPosition"/>
				
				<Controller_Selector>
					<Controller_Sequence Debug="Teleport_Now">
						<!-- The army is right above the city, initiate teleport!. -->
						<Decorator_DestinationReached DestinationVarName="$AlliedCityPosition"/>
						<Controller_Selector>
							<Decorator_IsTargetLocked TargetVarName="$TargetCity"/>
							<Action_TeleportToCity DestinationVarName="$TargetCity"/>
						</Controller_Selector>
					</Controller_Sequence>

					<Controller_Sequence Debug="Teleport_ReachCity">
						<Action_GeneratePath DestinationVarName="$AlliedCityPosition" TypeOfPath="Regular" Output_PathVarName="$Path"/>
						<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
						<Decorator_MoveEnded PathVarName="$Path"/>
						<Decorator_DestinationReached DestinationVarName="$AlliedCityPosition"/>
						<Controller_Selector>
							<Decorator_IsTargetLocked TargetVarName="$TargetCity"/>
							<Action_TeleportToCity DestinationVarName="$TargetCity"/>
						</Controller_Selector>
					</Controller_Sequence>
				</Controller_Selector>
			</Controller_Sequence>
			
			<Controller_Sequence Debug="DefendBesiegedCities_Walk">
				<Decorator_SelectClosestBesiegedCity Inverted="false" Output_TargetVarName="$TargetCity"/>
				
				<Controller_Selector>
					<Decorator_SelectSiegingArmyPosition CityUnderSiege="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/> 
					<Decorator_GetTargetPosition TargetVarName="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/>
				</Controller_Selector>
				
				<Decorator_UpdateSiegeBreakerAssignation WaitForSupport="false" CityUnderSiege="$TargetCity"/>
				
				<Controller_Selector>
					<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>
					
					<Controller_Sequence Debug="FreeCity_AttackImmediatly">
						<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
						<Decorator_CityNeedsImmediateHelp CityUnderSiege="$TargetCity"/>
						<Controller_Selector>
							<Decorator_UpdateSiegeBreakerAssignation WaitForSupport="true" CityUnderSiege="$TargetCity" DestinationVarName="$WorldPositionDestination"/>
							<Include SubTreeName="TryToAttackEnemyInRange"/>
						</Controller_Selector>
					</Controller_Sequence>
					
					<Decorator_IsTargetLocked TargetVarName="$TargetCity"/>
					
					<Controller_Sequence Debug="FreeCity_MoveTowardCity">
						<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
						<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
						<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					</Controller_Sequence>
					
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
				</Controller_Selector>
			</Controller_Sequence>
		</Controller_Selector>
	</AIArmyMissionDefinition>
	
	<!-- ELCP/LeaderEnemyBoss: new subtree for dynamic preemptive city defense -->
	<AIArmyMissionDefinition Name="DefendEndangeredCities">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>
		<Controller_Sequence Debug="DefendBesiegedCities_Selector">
			<!-- AILayer_War assigns armies to defensive cities, if we got assigned, go there -->
			<Decorator_SelectDefenseCity Inverted="false" Output_TargetVarName="$AlliedCity"/>
			<Decorator_GetTargetPosition TargetVarName="$AlliedCity" Output_DestinationVarName="$AlliedCityPosition"/>
			
			<Controller_Selector>
				<!-- if we are at the target, attack weak nearby enemies, or do nothing -->
				<Controller_Sequence>
					<Decorator_DestinationReached DestinationVarName="$AlliedCityPosition" TypeOfCheck="Regular"/>
					<Controller_Selector>
						<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>
						<!-- always succeed so the army stays in place -->
						<Decorator_Successor />
					</Controller_Selector>
				</Controller_Sequence>
				
				<!-- try to teleport to the target if possible -->
				<Controller_Sequence Debug="Defense_ReachCity_Teleport">
					<Decorator_CanTeleportToTarget TargetVarName="$AlliedCity"/>
					<Decorator_SelectClosestBesiegedCity Inverted="true" Output_TargetVarName="$TeleCity"/>
					<Decorator_GetTargetPosition TargetVarName="$TeleCity" Output_DestinationVarName="$TeleCityPosition"/>
					
					<Controller_Selector>
						<Controller_Sequence Debug="Teleport_Now">
							<!-- The army is right above the city, initiate teleport!. -->
							<Decorator_DestinationReached DestinationVarName="$TeleCityPosition"/>
							<Controller_Selector>
								<Decorator_IsTargetLocked TargetVarName="$AlliedCity"/>
								<Action_TeleportToCity DestinationVarName="$AlliedCity"/>
							</Controller_Selector>
						</Controller_Sequence>
						
						<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore" />
						<Include SubTreeName="OpportunitySearchRuin">
							<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$TeleCityPosition"/>
							<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>                
						</Include>
						
						<Include SubTreeName="OrbsOpportunity">
							<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$TeleCityPosition"/>
							<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>
						</Include>

						<Controller_Sequence Debug="Teleport_ReachCity">
							<Action_GeneratePath DestinationVarName="$TeleCityPosition" TypeOfPath="Regular" Output_PathVarName="$Path"/>
							<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$Path"/>
							<Decorator_DestinationReached DestinationVarName="$TeleCityPosition"/>
							<Controller_Selector>
								<Decorator_IsTargetLocked TargetVarName="$AlliedCity"/>
								<Action_TeleportToCity DestinationVarName="$AlliedCity"/>
							</Controller_Selector>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>
				
				<!-- attack or ignor enemies, search opportune ruins-->
				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$AlliedCityPosition"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>                
				</Include>
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$AlliedCityPosition"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>
				</Include>
				
				<Decorator_IsTargetLocked TargetVarName="$AlliedCity"/>
				<!-- go to the city we want to reach -->
				<Controller_Sequence Debug="Defense_ReachCity">
					<Action_GeneratePath DestinationVarName="$AlliedCityPosition" TypeOfPath="Regular" Output_PathVarName="$Path" AllowFastTravel="true"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
					<Decorator_DestinationReached DestinationVarName="$AlliedCityPosition"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>	
	</AIArmyMissionDefinition>
	
	<AIArmyMissionDefinition Name="TryToAttackEnemyInRangeOrIgnore">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>

		<!--IF EnnemyDetected AND I can defeat him THEN Engage it -->
		<Controller_Sequence Debug="TryToAttackEnemyInRangeOrIgnore">

			<!-- First, select a target. -->
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Any" TypeOfDiplomaticRelation="DangerForMe" Output_TargetVarName="$Target"/>

			<Controller_Selector>
				<Controller_Sequence>
					<!-- Check if we ca defeat this target. -->
					<Decorator_CanDefeatTarget Inverted="false" TargetVarName="$Target"/>
					<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>
					
					<Controller_Selector>
						<Controller_Sequence Debug="TryToAttackEnemyCityInRange">
							<Decorator_TargetTypeCheck TargetVarName="$Target" TargetTypeCheck="City"/>	
							
							<Controller_Selector>
								<Controller_Sequence>
									<Decorator_IsTargetBesieging Inverted="false" TargetVarName="$Army" TargetCityVarName="$Target"/>
									<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Regular"/>
									<Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
									<Action_ShiftUnits TargetVarName="$Target"/>
									<Action_Attack TargetVarName="$Target"/>
								</Controller_Sequence>
								
								<Controller_Sequence>
									<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Regular"/>
									<Action_ToggleSiege TargetVarName="$Target" State="On"/>
								</Controller_Sequence>
							
								<Controller_Sequence Debug="MoveTowardCity">
									<Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" Output_PathVarName="$Path"/>
									<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
									<Decorator_MoveEnded PathVarName="$Path"/>
									<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Regular"/>
									<Action_ToggleSiege TargetVarName="$Target" State="On"/>
								</Controller_Sequence>
							</Controller_Selector>
						</Controller_Sequence>
					
						<Controller_Selector Debug="TryToAttackEnemyInRange_EnemyInRange">
							<Include SubTreeName="OptimizeArmyAttackPosition"/>
							<Controller_Sequence Debug="TryToAttackEnemyInRange_EnemyClose">
								<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Attack"/>
								<Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
								<Action_ShiftUnits TargetVarName="$Target"/>
								<Action_Attack TargetVarName="$Target"/>
							</Controller_Sequence>

							<Controller_Sequence Debug="TryToAttackEnemyInRange_GotoAndAttack">
								<Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
								<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
								<Action_ImmolateUnits TargetVarName="$Target" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
								<Action_ShiftUnits TargetVarName="$Target"/>
								<Action_GotoAndAttack TargetVarName="$Target" PathVarName="$Path"/>
								<Decorator_MoveEnded PathVarName="$Path"/>
							</Controller_Sequence>
						</Controller_Selector>
					</Controller_Selector>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>
	
	<!-- ELCP/LeaderEnemyBoss: new subtree for dynamic leader following -->
	<AIArmyMissionDefinition Name="SupportLeader">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>
		<Controller_Sequence Debug="SupportLeader_Sequence">
			<Decorator_FindArmyToSupport Output_TargetVarName="$ArmyToSupport" Output_MainTargetVarName="$CommanderTarget"/>
			<Decorator_GetTargetPosition TargetVarName="$ArmyToSupport" Output_DestinationVarName="$AlliedArmyPosition"/>
			
			
			<Controller_Selector>
				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>
				
				<!-- if we are near the leading army, move towards their objective -->
				<Controller_Sequence>
					<Decorator_DestinationReached DestinationVarName="$AlliedArmyPosition" TypeOfCheck="InRange" Range="1"/>
					<Controller_Selector>
						<Decorator_GetTargetPosition TargetVarName="$CommanderTarget" Output_DestinationVarName="$CommanderTargetPosition"/>
						<Decorator_Successor />
					</Controller_Selector>
					<Controller_Selector>	
						<Decorator_VariableCheck VarName="$CommanderTargetPosition" CheckOperation="NotExists"/>
						<Decorator_DestinationReached DestinationVarName="$CommanderTargetPosition" TypeOfCheck="Regular" Range="6"/>
						<Controller_Sequence Debug="MoveTowardsCommanderTarget">
							<Action_GeneratePath DestinationVarName="$CommanderTargetPosition" TypeOfPath="Regular" Output_PathVarName="$PathToTarget"/>
							<Action_Move PathVarName="$PathToTarget" TypeOfMove="Regular"/>
						</Controller_Sequence>
						<Decorator_Successor />
					</Controller_Selector>
				</Controller_Sequence>
				
				<Controller_Sequence Debug="Regroup_MoveToRegroup">
					<Action_GeneratePath DestinationVarName="$AlliedArmyPosition" TypeOfPath="Regular" Output_PathVarName="$PathToTarget"/>
					<Action_Move PathVarName="$PathToTarget" TypeOfMove="Regular"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
		
	</AIArmyMissionDefinition>
	
	<AIArmyMissionDefinition Name="ExploreNearbyRuin">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>

		<!--IF RuinDetected THEN explore the ruin -->
		<Controller_Sequence Debug="Explore_SearchRuin">
			<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Ruin" Output_TargetVarName="$Target"/>
			<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$RuinWorldPositionDestination"/>

			<Controller_Selector>            
				<Controller_Sequence Debug="Explore_SearchRuin_AlreadyAtDestination">
					<Decorator_DestinationReached DestinationVarName="$RuinWorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_SearchInRuin TargetVarName="$Target"/>
				</Controller_Sequence>

        <Controller_Sequence Debug="Explore_SearchRuin_DiveAtDestination">
          <Decorator_DestinationReached DestinationVarName="$RuinWorldPositionDestination" TypeOfCheck="Regular"/>
          <Action_SearchInRuin TargetVarName="$Target"/>
        </Controller_Sequence>

				<Controller_Sequence Debug="Explore_SearchRuin_MoveToRuin">
					<Action_GeneratePath DestinationVarName="$RuinWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$RuinPath"/>
					<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$RuinWorldPositionDestination" PathVarName="$RuinPath"/>
					<Action_Move PathVarName="$RuinPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$RuinPath"/>
					<Action_SearchInRuin TargetVarName="$Target"/>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>
	
	<!-- ELCP/LeaderEnemyBoss: simple pillage without opportunity -->
	<AIArmyMissionDefinition Name="PillageOrFlee">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetList"/>
		</Parameters>

		<!--IF we could Pillage something THEN try to pillage it -->
		<Controller_Sequence>
			<Controller_Selector Debug="PillagingAndHeavyArmyComing">
				<!-- We are all right when there is no target around.-->
				<Decorator_SelectTarget Inverted="true" TargetListVarName="$TargetList" TypeOfTarget="Army" TypeOfDiplomaticRelation="DangerForMe" Output_TargetVarName="$Target"/>

				<!-- We are all right when there is a target but we are able to defeat it.-->
				<Decorator_CanDefeatTarget TargetVarName="$Target" EstimateBattlegound="true"/>
			</Controller_Selector>

			<!-- nothing to do! -->
			<Controller_Selector>
				<Decorator_IsArmyPillaging TargetVarName="$Army"/>

				<Controller_Sequence>
					<Decorator_SelectPillageTarget TargetListVarName="$TargetList"
                                         Output_TargetVarName="$PillageTarget"
                                         OpportunityMaximumTurn="0"/>

					<Decorator_GetTargetPosition TargetVarName="$PillageTarget" Output_DestinationVarName="$PillageTargetWorldPositionDestination"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_Pillage_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfCheck="Attack"/>
							<Action_TogglePillage TargetVarName="$PillageTarget"/>
						</Controller_Sequence>

						<!-- Wait until we have ended the pillage! -->
						<Decorator_DestinationReached DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfCheck="Attack"/>

						<Controller_Sequence Debug="Opportunity_Pillage_MoveToTarget">
							<Action_GeneratePath DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$PillagePath"/>
							<Action_Move PathVarName="$PillagePath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$PillagePath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>
			</Controller_Selector>
		</Controller_Sequence>
	</AIArmyMissionDefinition>
	
	<!-- End ELCP -->
</Datatable>
