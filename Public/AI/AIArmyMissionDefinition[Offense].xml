<?xml version="1.0" encoding="utf-8" ?>
<Datatable xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <!-- Not Opportunist at all-->
	<AIArmyMissionDefinition Name="AttackCity">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetCity"/>
		</Parameters>
		<Controller_Sequence Debug="AttackCity_Root">
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<!--IF Army in under control THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>

			<Decorator_GetTargetPosition TargetVarName="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/>

			<Controller_Selector Debug="AttackCity_Selector">
				<Include SubTreeName="OpportunityConvertVillage"/>
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>

        <!--IF we could collect a map boost then change path -->
        <Include SubTreeName="MapBoostOpportunity">
          <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
          <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>
        </Include>

				<Controller_Sequence Debug="StartSiege">
					<Decorator_IsTargetBesieging Inverted="true" TargetVarName="$Army" TargetCityVarName="$TargetCity"/>
					<Action_ToggleSiege  TargetVarName="$TargetCity" State="On"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="EngageCity">
					<!-- The decorator checks if the army is on an exploitation tile. This will need to be changed when the condition for besieging will become "when adjacent to a city hall or burrough (or bug with frontiers)-->
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
          <Action_ImmolateUnits TargetVarName="$TargetCity" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
					<Action_Attack TargetVarName="$TargetCity"/>
				</Controller_Sequence>

				<!--IF EnnemyDetected AND I can defeat him THEN Engage him-->
				<Include SubTreeName="TryToAttackEnemyInRange"/>

        <!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
        <Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
        
        <!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyWildKaiju"/>

        <!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyTamedKaiju"/>
     
        <Controller_Sequence Debug="MoveTowardCity">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_Attack TargetVarName="$TargetCity"/>
				</Controller_Sequence>

			</Controller_Selector>
		</Controller_Sequence>

	</AIArmyMissionDefinition>

  <!-- Not Opportunist at all-->
	<AIArmyMissionDefinition Name="BesiegeCity">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetCity"/>
			<Parameter ParameterIndex="1" VarName="$MayAttack"/>
		</Parameters>
		<Controller_Sequence Debug="BesiegeCity_Root">
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<!--IF Army in under control THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$TargetCity"/>
			<Decorator_GetTargetPosition TargetVarName="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/>

			<!-- Try to besiege the city. -->
			<Controller_Selector Debug="BesiegeCity_Selector">
			
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>
				</Include>
			
				<Controller_Sequence Debug="DefendIfStillAtHome">
					<Decorator_IsInOwnRegion Inverted="false"/>
					<Include SubTreeName="DefendBesiegedCities"/>
				</Controller_Sequence>
				
				<!-- When we are already besieging and we can defeat the city, attack. -->
				<Controller_Sequence Debug="Attack City">
					<Decorator_IsTargetBesieging Inverted="false" TargetVarName="$Army" TargetCityVarName="$TargetCity"/>

					<Controller_Selector>
						<Controller_Sequence Debug="MightWinWhenAttackCity">
							<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
							<Decorator_CanDefeatCity Inverted="false" TargetVarName="$TargetCity"/>
							<Action_Attack TargetVarName="$TargetCity"/>
						</Controller_Sequence>

						<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					</Controller_Selector>
				</Controller_Sequence>

				<!-- When we are at destination, start the siege. -->
				<Controller_Sequence Debug="BesiegeCity">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_ToggleSiege TargetVarName="$TargetCity" State="On"/>
				</Controller_Sequence>

				<!-- When we are at destination, do nothing else. TODO: We could attack or search or pillage anything around -->
				<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>

				<!--IF EnnemyDetected AND I can defeat him THEN Engage him-->
				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>
				
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>
				
				<!-- LEB: new waiting logic for War and victory commanders -->
				<!-- Wait for other armies of this commander if they are behind us (and not too far away) -->
				<Decorator_WaitForAllies TargetVarName="$TargetCity" Output_LeaderVarName="$LeadingArmy"/>	
				<!-- follow the leader if we arent it -->
				<Controller_Sequence>
					<Decorator_VariableCheck VarName="$LeadingArmy" CheckOperation="Exists"/>
					<Decorator_GetTargetPosition TargetVarName="$LeadingArmy" Output_DestinationVarName="$LeaderDestination"/>
					<Action_GeneratePath DestinationVarName="$LeaderDestination" Output_PathVarName="$LeaderPath" AllowFastTravel="true"/>
					<Action_Move PathVarName="$LeaderPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$LeaderPath"/>
				</Controller_Sequence>	

				<!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
				<Include SubTreeName="TryLuxuryTameNearbyKaiju"/>

				<!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyWildKaiju"/>

				<!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyTamedKaiju"/>
				
				<!--IF Stunned Kaiju Detected, and can cost tame, THEN tray to tame it-->
				<Include SubTreeName="TryTameNearbyStunnedKaiju"/>

				<Controller_Sequence Debug="MoveTowardCity">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_ToggleSiege TargetVarName="$TargetCity" State="On"/>
				</Controller_Sequence>

			</Controller_Selector>

		</Controller_Sequence>
	</AIArmyMissionDefinition>


  <AIArmyMissionDefinition Name="AttackCamp">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$TargetCamp"/>
    </Parameters>
    <Controller_Sequence Debug="AttackCamp_Root">
      <Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

      <!--IF Army in under control THEN Mission failed-->
      <Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
	  <Decorator_IsTargetLocked Inverted="true" TargetVarName="$TargetCamp"/>
	  
      <Decorator_GetTargetPosition TargetVarName="$TargetCamp" Output_DestinationVarName="$WorldPositionDestination"/>

      <!-- Try to attack the camp. -->
      <Controller_Selector Debug="AttackCamp_Selector">
        
		<Controller_Sequence Debug="DefendIfStillAtHome">
			<Decorator_IsInOwnRegion Inverted="false"/>
			<Include SubTreeName="DefendBesiegedCities"/>
		</Controller_Sequence>
		
        <!-- If we reached the camp, attack it. -->
        <Controller_Sequence Debug="Attack Camp">
          <Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
          <Action_ImmolateUnits TargetVarName="$TargetCamp" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>/>
          <Action_Attack TargetVarName="$TargetCamp"/>
        </Controller_Sequence>

        <!--IF EnnemyDetected AND I can defeat him THEN Engage him-->
        <Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>
	
	<Decorator_WaitForAllies TargetVarName="$TargetCamp" Output_LeaderVarName="$LeadingArmy"/>	
		<!-- follow the leader if we arent it -->
		<Controller_Sequence>
			<Decorator_VariableCheck VarName="$LeadingArmy" CheckOperation="Exists"/>
			<Decorator_GetTargetPosition TargetVarName="$LeadingArmy" Output_DestinationVarName="$LeaderDestination" />
			<Action_GeneratePath DestinationVarName="$LeaderDestination" Output_PathVarName="$LeaderPath" AllowFastTravel="true"/>
			<Action_Move PathVarName="$LeaderPath" TypeOfMove="Regular"/>
			<Decorator_MoveEnded PathVarName="$LeaderPath"/>
		</Controller_Sequence>	

        <!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
        <Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
        
        <!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyWildKaiju"/>

        <!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyTamedKaiju"/>

        
        <!--IF not in range move to destination fist -->
        <Controller_Sequence Debug="MoveTowardCamp">
          <Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
          <Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
          <Decorator_MoveEnded PathVarName="$Path"/>
          <Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
          <Action_Attack TargetVarName="$TargetCamp"/>
        </Controller_Sequence>

      </Controller_Selector>

    </Controller_Sequence>
  </AIArmyMissionDefinition>

	<!-- Opportunist when its convenient-->
	<AIArmyMissionDefinition Name="AttackArmy">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetArmy"/>
			<Parameter ParameterIndex="1" VarName="$RegionIndex"/>
		</Parameters>
		<Controller_Sequence Debug="AttackArmy_Root">

			<!--IF Army in under control THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetBesieging Inverted="true" TargetVarName="$Army"/>
			<Decorator_GetTargetPosition TargetVarName="$TargetArmy" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector Debug="AttackArmy_Selector">
                <Include SubTreeName="OptimizeArmyAttackPosition">
                    <VariableConverter ToVariable="$Target" FromVariable="$TargetArmy"/>
                </Include>
                                    
				<Controller_Sequence Debug="EngageArmy">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_ImmolateUnits TargetVarName="$TargetArmy" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
					<Action_Attack TargetVarName="$TargetArmy"/>
				</Controller_Sequence>

				<!--IF EnnemyDetected AND I can defeat him THEN Engage him-->
				<Include SubTreeName="TryToAttackEnemyInRangeOrFlee"/>
				
				<!--IF we could collect a map boost then change path -->
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="2"/>
				</Include>
				
				<Include SubTreeName="OpportunityConvertVillage"/>

        <!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
        <Include SubTreeName="TryLuxuryTameNearbyKaiju"/>

        <!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyWildKaiju"/>

        <!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyTamedKaiju"/>


        <!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="2"/>                
				</Include>

				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="2"/>
				</Include>

        

				<Controller_Sequence Debug="MoveTowardArmy">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Attack"/>
					<Action_Attack TargetVarName="$TargetArmy"/>
				</Controller_Sequence>

			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- Not Opportunist at all-->
	<AIArmyMissionDefinition Name="FreeCity">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetCity"/>
		</Parameters>
		<Controller_Sequence Debug="FreeCity_Root">

			<!--IF Army in under control THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$TargetCity"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>
			
			<Controller_Selector Debug="FreeCity_Selector">
				<Include SubTreeName="DefendBesiegedCities"/>
			
				<Controller_Sequence Debug="DefendBesiegedCities_Teleport">
					<Decorator_SelectClosestBesiegedCity Inverted="false" Teleport="true" Output_TargetVarName="$TeleportCity"/>
					<Decorator_SelectClosestBesiegedCity Inverted="true" Output_TargetVarName="$AlliedCity"/>
					<Decorator_GetTargetPosition TargetVarName="$AlliedCity" Output_DestinationVarName="$AlliedCityPosition"/>
					
					<Controller_Selector>
						<Controller_Sequence Debug="Teleport_Now">
							<!-- The army is right above the city, initiate teleport!. -->
							<Decorator_DestinationReached DestinationVarName="$AlliedCityPosition"/>
							<Controller_Selector>
								<Decorator_IsTargetLocked TargetVarName="$TeleportCity"/>
								<Action_TeleportToCity DestinationVarName="$TeleportCity"/>
							</Controller_Selector>
						</Controller_Sequence>

						<Controller_Sequence Debug="Teleport_ReachCity">
							<Action_GeneratePath DestinationVarName="$AlliedCityPosition" TypeOfPath="Regular" Output_PathVarName="$Path"/>
							<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$Path"/>
							<Decorator_DestinationReached DestinationVarName="$AlliedCityPosition"/>
							<Controller_Selector>
								<Decorator_IsTargetLocked TargetVarName="$TeleportCity"/>
								<Action_TeleportToCity DestinationVarName="$TeleportCity"/>
							</Controller_Selector>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>
				<!--IF Enemy sieging the city is detected THEN Engage him-->
				<Controller_Sequence Debug="FreeCity_Attack">
					<Controller_Selector>
						<Decorator_CityNeedsImmediateHelp CityUnderSiege="$TargetCity"/>
						<Decorator_CanDefeatTarget StrongestAttacker="true"/> <!-- ELCP: Modified decorator that checks, if the army is the strongest potential attacker -->
					</Controller_Selector>
					<Include SubTreeName="TryToAttackEnemyInRange"/>
				</Controller_Sequence>
				<!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
				<Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
				
				<!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyWildKaiju"/>

				<!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyTamedKaiju"/>
				
				<!--IF Stunned Kaiju Detected, and can cost tame, THEN tray to tame it-->
				<Include SubTreeName="TryTameNearbyStunnedKaiju"/>
        
				<Controller_Sequence Debug="FreeCity_MoveTowardCity">
					<Decorator_SelectSiegingArmyPosition CityUnderSiege="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/>
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="FreeCity_MoveTowardCity">
					<Decorator_GetTargetPosition TargetVarName="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/>
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" AllowFastTravel="true"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
				</Controller_Sequence>
				
				<!-- ELCP: Backup Roaming behavior -->
				<Controller_Sequence Debug="BackupRoaming">
					<Controller_Selector>
						<Controller_Sequence Debug="Roaming_ChangeTarget">
							<Decorator_VariableCheck VarName="$RoamingDestination" CheckOperation="Exists"/>
							<Decorator_DestinationReached DestinationVarName="$RoamingDestination" TypeOfCheck="Regular"/>
							<Decorator_GetNextRoamingPositionAroundCity TargetCity="$TargetCity" Output_DestinationVarName="$RoamingDestination" />
							<Action_GeneratePath DestinationVarName="$RoamingDestination" TypeOfPath="Regular" Output_PathVarName="$Path" AllowFastTravel="true"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="Roaming_GoToPreviousTarget">
							<Decorator_VariableCheck VarName="$RoamingDestination" CheckOperation="Exists"/>
							<Action_GeneratePath DestinationVarName="$RoamingDestination" TypeOfPath="Regular" Output_PathVarName="$Path" AllowFastTravel="true"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="Roaming_FirstTime">
							<Decorator_GetNextRoamingPositionAroundCity TargetCity="$TargetCity" Output_DestinationVarName="$RoamingDestination"/>
							<Action_GeneratePath DestinationVarName="$RoamingDestination" TypeOfPath="Regular" Output_PathVarName="$Path" AllowFastTravel="true"/>
						</Controller_Sequence>
					</Controller_Selector>

					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
					<Decorator_DestinationReached DestinationVarName="$RoamingDestination" TypeOfCheck="Regular"/>
				</Controller_Sequence>

			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- Not Opportunist at all-->
	<AIArmyMissionDefinition Name="BribeVillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$RegionIndex"/>
			<Parameter ParameterIndex="1" VarName="$VillageToBribe"/>
		</Parameters>
		<Controller_Sequence Debug="BribeVillage_Root">

			<!-- If army locked, wait some.-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$VillageToBribe"/>
			<Decorator_GetTargetPosition TargetVarName="$VillageToBribe" Output_DestinationVarName="$VillagePosition"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector>
				<Controller_Sequence Debug="BribeVillage_TryToBribeVillage">
					<Action_GeneratePath DestinationVarName="$VillagePosition" TypeOfPath="Regular" Output_PathVarName="$PathToVillage"/>

					<Controller_Selector>
						<Controller_Sequence Debug="BribeVillage_AtDestinationToBribeVillage_1">
							<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
							<Action_Bribe TargetVarName="$VillageToBribe"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="BribeVillage_BribeVillage">

							<Decorator_VariableCheck VarName="$PathToVillage" CheckOperation="Exists"/>
							<Action_Move PathVarName="$PathToVillage" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$PathToVillage" TypeOfCheck="Regular"/>
							<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
							<Action_Bribe TargetVarName="$VillageToBribe"/>

						</Controller_Sequence>

					</Controller_Selector>

				</Controller_Sequence>

				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>

				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$VillagePosition"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>


        <!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
        <Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
        
        <!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyWildKaiju"/>

        <!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyTamedKaiju"/>

        
        <!--IF we could Pillage something THEN try to pillage it -->
				<Include SubTreeName="OpportunityPillageOrFlee">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$VillagePosition"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>
        
        <!--If there is a creeping node, destroy it -->
        <Include SubTreeName="OpportunityDestroyCreepingNode">
          <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
          <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
        </Include>

				<!--IF City need vision for spy THEN explore Ruin-->
				<Controller_Sequence Debug="Opportunity_CityToSpy">
					<Decorator_SelectCityLookAtToInfiltrate TargetListVarName="$TargetList" Output_TargetVarName="$CityToLookAtTarget"/>
					<Decorator_GetTargetPosition TargetVarName="$CityToLookAtTarget" Output_DestinationVarName="$CityToLookAtWorldPositionDestination"/>
					<Decorator_EvaluateOpportunity OpportunityPosition="$CityToLookAtWorldPositionDestination" OpportunityType="CityToSpy" 
                                                   MainTargetPosition="$VillagePosition" 
                                                   MainTargetType="Village" MinimumTurnToObjectif="2" MaximumDetourTurn="1"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_CityToSpy_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfCheck="Attack"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="Opportunity_CityToSpy_MoveToRuin">
							<Action_GeneratePath DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$CityToSpyPath"/>
							<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$CityToLookAtWorldPositionDestination" PathVarName="$CityToSpyPath"/>
							<Action_Move PathVarName="$CityToSpyPath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$CityToSpyPath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<Controller_Sequence Debug="BribeVillage_AtDestinationToBribeVillage_2">
					<Decorator_GetTargetPosition TargetVarName="$VillageToBribe" Output_DestinationVarName="$VillagePosition"/>
					<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
					<Action_Bribe TargetVarName="$VillageToBribe"/>

				</Controller_Sequence>

			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- Not Opportunist at all-->
	<AIArmyMissionDefinition Name="ConvertVillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$RegionIndex"/>
			<Parameter ParameterIndex="1" VarName="$VillageToConvert"/>
		</Parameters>
		<Controller_Sequence Debug="ConvertVillage_Root">

			<!-- If army locked, wait some.-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$VillageToConvert"/>
			<Decorator_GetTargetPosition TargetVarName="$VillageToConvert" Output_DestinationVarName="$VillagePosition"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector>
				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>

				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$VillagePosition"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>


        <!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
        <Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
        
        <!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyWildKaiju"/>

        <!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyTamedKaiju"/>

        
        <!--IF City need vision for spy THEN explore Ruin-->
				<Controller_Sequence Debug="Opportunity_CityToSpy">
					<Decorator_SelectCityLookAtToInfiltrate TargetListVarName="$TargetList" Output_TargetVarName="$CityToLookAtTarget"/>
					<Decorator_GetTargetPosition TargetVarName="$CityToLookAtTarget" Output_DestinationVarName="$CityToLookAtWorldPositionDestination"/>
					<Decorator_EvaluateOpportunity OpportunityPosition="$CityToLookAtWorldPositionDestination" 
                                                   OpportunityType="CityToSpy" 
                                                   MainTargetPosition="$VillagePosition" MainTargetType="City" 
                                                   MinimumTurnToObjectif="2" MaximumDetourTurn="1"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_CityToSpy_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfCheck="Attack"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="Opportunity_CityToSpy_MoveToRuin">
							<Action_GeneratePath DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$CityToSpyPath"/>
							<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$CityToLookAtWorldPositionDestination" PathVarName="$CityToSpyPath"/>
							<Action_Move PathVarName="$CityToSpyPath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$CityToSpyPath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<Controller_Sequence Debug="ConvertVillage_TryToConvertVillage">
					<Action_GeneratePath DestinationVarName="$VillagePosition" TypeOfPath="Regular" Output_PathVarName="$PathToVillage"/>

					<Controller_Selector>
						<Controller_Sequence Debug="ConvertVillage_AtDestinationToConvertVillage_1">
							<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
							<Controller_Selector Debug="ConvertOrBribe">
								<Action_Bribe TargetVarName="$VillageToConvert"/>
								<Action_ConvertVillage TargetVarName="$VillageToConvert"/>
							</Controller_Selector>
						</Controller_Sequence>

						<Controller_Sequence Debug="ConvertVillage_ConvertVillage">

							<Decorator_VariableCheck VarName="$PathToVillage" CheckOperation="Exists"/>
							<Action_Move PathVarName="$PathToVillage" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$PathToVillage"/>
							<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
							<Controller_Selector Debug="ConvertOrBribe">
								<Action_Bribe TargetVarName="$VillageToConvert"/>
								<Action_ConvertVillage TargetVarName="$VillageToConvert"/>
							</Controller_Selector>
						</Controller_Sequence>

					</Controller_Selector>

				</Controller_Sequence>
				
				<Controller_Selector>
					<Controller_Sequence Debug="ConvertVillage_AtDestinationToConvertVillage_2">
						<Decorator_GetTargetPosition TargetVarName="$VillageToConvert" Output_DestinationVarName="$VillagePosition"/>
						<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
						<Controller_Selector Debug="ConvertOrBribe">
							<Action_Bribe TargetVarName="$VillageToConvert"/>
							<Action_ConvertVillage TargetVarName="$VillageToConvert"/>
						</Controller_Selector>
					</Controller_Sequence>
					
					<Controller_Sequence Debug="ConvertVillage_EngageVillage">
						<Decorator_GetTargetPosition TargetVarName="$VillageToConvert" Output_DestinationVarName="$VillagePosition"/>
						<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
						<Decorator_CanDefeatTarget TargetVarName="$VillageToConvert"/>
						<Action_ShiftUnits TargetVarName="$VillageToConvert"/>
						<Action_Attack TargetVarName="$VillageToConvert"/>
						<Action_ConvertVillage TargetVarName="$VillageToConvert"/>
					</Controller_Sequence>
				</Controller_Selector>
			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- Opportunist 100%-->
	<AIArmyMissionDefinition Name="PacifyAndConvertVillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$RegionIndex"/>
			<Parameter ParameterIndex="1" VarName="$VillageToConvert"/>
		</Parameters>
		<Controller_Sequence Debug="ConvertVillage_Root">

			<!-- If army locked, wait some.-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$VillageToConvert"/>
			<Decorator_GetTargetPosition TargetVarName="$VillageToConvert" Output_DestinationVarName="$VillagePosition"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector>
				<Controller_Sequence Debug="ConvertVillage_AtDestinationToConvertVillage_2">
					<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
					<Controller_Selector Debug="ConvertOrBribe">
            <Action_ImmolateUnits TargetVarName="$VillageToConvert" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>/>
						<Action_ShiftUnits TargetVarName="$VillageToConvert"/>
						<Action_Attack TargetVarName="$VillageToConvert"/>
						<Action_ConvertVillage TargetVarName="$VillageToConvert"/>
					</Controller_Selector>
				</Controller_Sequence>
			
				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="ExploreNearbyRuin"/>
				
				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$VillagePosition"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

        <!--IF we could collect a map boost then change path -->
        <Include SubTreeName="MapBoostOpportunity">
          <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$VillagePosition"/>
          <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
        </Include>

				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>

        <!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
        <Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
        
        <!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyWildKaiju"/>

        <!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyTamedKaiju"/>

        
        <!--IF we could Pillage something THEN try to pillage it -->
				<Include SubTreeName="OpportunityPillageOrFlee">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$VillagePosition"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

        <!--If there is a creeping node, destroy it -->
        <Include SubTreeName="OpportunityDestroyCreepingNode">
          <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
          <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
        </Include>

				<!--IF City need vision for spy THEN explore Ruin-->
				<Controller_Sequence Debug="Opportunity_CityToSpy">
					<Decorator_SelectCityLookAtToInfiltrate TargetListVarName="$TargetList" Output_TargetVarName="$CityToLookAtTarget"/>
					<Decorator_GetTargetPosition TargetVarName="$CityToLookAtTarget" Output_DestinationVarName="$CityToLookAtWorldPositionDestination"/>
					<Decorator_EvaluateOpportunity OpportunityPosition="$CityToLookAtWorldPositionDestination" 
                                                   OpportunityType="CityToSpy" 
                                                   MainTargetPosition="$VillagePosition" MainTargetType="Village" 
                                                   MinimumTurnToObjectif="2" MaximumDetourTurn="1"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_CityToSpy_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfCheck="Attack"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="Opportunity_CityToSpy_MoveToRuin">
							<Action_GeneratePath DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$CityToSpyPath"/>
							<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$CityToLookAtWorldPositionDestination" PathVarName="$CityToSpyPath"/>
							<Action_Move PathVarName="$CityToSpyPath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$CityToSpyPath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<Controller_Sequence Debug="ConvertVillage_TryToConvertVillage">
					<Action_GeneratePath DestinationVarName="$VillagePosition" TypeOfPath="Regular" Output_PathVarName="$PathToVillage"/>

					<Controller_Selector>
						<Controller_Sequence Debug="ConvertVillage_AtDestinationToConvertVillage_1">
							<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
							<Controller_Selector Debug="ConvertOrBribe">
								<Action_Attack TargetVarName="$VillageToConvert"/>
								<Action_ConvertVillage TargetVarName="$VillageToConvert"/>
							</Controller_Selector>
						</Controller_Sequence>

						<Controller_Sequence Debug="ConvertVillage_ConvertVillage">

							<Decorator_VariableCheck VarName="$PathToVillage" CheckOperation="Exists"/>
							<Action_Move PathVarName="$PathToVillage" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$PathToVillage"/>
							<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
							<Controller_Selector Debug="ConvertOrBribe">
								<Action_Attack TargetVarName="$VillageToConvert"/>
								<Action_ConvertVillage TargetVarName="$VillageToConvert"/>
							</Controller_Selector>

						</Controller_Sequence>

					</Controller_Selector>

				</Controller_Sequence>

			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- Opportunist 100%-->
	<AIArmyMissionDefinition Name="PacifyVillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$Village"/>
		</Parameters>
		<Controller_Sequence Debug="PacifyVillage_Root">

			<!--IF Army locked (in battle) THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Village"/>
			<Decorator_GetTargetPosition TargetVarName="$Village" Output_DestinationVarName="$WorldPositionDestination"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector Debug="PacifyVillage_Root2">

				<Controller_Sequence Debug="BribeVillage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_Bribe TargetVarName="$Village"/>
				</Controller_Sequence>

				<Controller_Sequence Debug="EngageVillage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<!-- Avoid to attack while there is a lot of roaming armies around.-->
					<Decorator_CanDefeatTarget TargetVarName="$Village"/>
					<Action_ImmolateUnits TargetVarName="$Village" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>/>
					<Action_ShiftUnits TargetVarName="$Village"/>
					<Action_Attack TargetVarName="$Village"/>
				</Controller_Sequence>

				<!--IF we could collect orbs THEN Change path -->
				<Include SubTreeName="OrbsOpportunity">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--IF we could collect a map boost then change path -->
				<Include SubTreeName="MapBoostOpportunity">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>

				<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>

				<!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
				<Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
				
				<!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyWildKaiju"/>

				<!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
				<Include SubTreeName="TryAttackNearbyTamedKaiju"/>
				
				<!--IF Stunned Kaiju Detected, and can cost tame, THEN tray to tame it-->
				<Include SubTreeName="TryTameNearbyStunnedKaiju"/>
        
				<!--IF we could Pillage something THEN try to pillage it -->
				<Include SubTreeName="OpportunityPillage">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--If there is a creeping node, destroy it -->
				<Include SubTreeName="OpportunityDestroyCreepingNode">
				  <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
				  <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
				</Include>

				<!--IF City need vision for spy THEN explore Ruin-->
				<Controller_Sequence Debug="Opportunity_CityToSpy">
					<Decorator_SelectCityLookAtToInfiltrate TargetListVarName="$TargetList" Output_TargetVarName="$CityToLookAtTarget"/>
					<Decorator_GetTargetPosition TargetVarName="$CityToLookAtTarget" Output_DestinationVarName="$CityToLookAtWorldPositionDestination"/>
					<Decorator_EvaluateOpportunity OpportunityPosition="$CityToLookAtWorldPositionDestination" 
                                                   OpportunityType="CityToSpy" 
                                                   MainTargetPosition="$WorldPositionDestination" MainTargetType="Village"
                                                   MinimumTurnToObjectif="2" MaximumDetourTurn="1"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_CityToSpy_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfCheck="Attack"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="Opportunity_CityToSpy_MoveToRuin">
							<Action_GeneratePath DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$CityToSpyPath"/>
							<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$CityToLookAtWorldPositionDestination" PathVarName="$CityToSpyPath"/>
							<Action_Move PathVarName="$CityToSpyPath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$CityToSpyPath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<!-- Move Toward village. -->
				<Controller_Selector Debug="PacifyVillage_MoveTowardVillageToEngage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>

					<Controller_Sequence Debug="PacifyVillage_MoveToward">
						<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path" IgnoreArmies="true"/>
						<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
						<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					</Controller_Sequence>										
				</Controller_Selector>
				
				<!--ELCP: LastResortRoaming if no valid path has been found-->		
				<Controller_Sequence Debug="LastResortRoaming">
					<Decorator_GetTargetPosition TargetVarName="$Army" Output_DestinationVarName="$MyPosition"/>
					<Decorator_GetNextRoamingPosition PositionVarName="$MyPosition" Output_DestinationVarName="$BorderDestination" LastResort="true"/>
					<Action_GeneratePath DestinationVarName="$BorderDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path" TypeOfCheck="Regular"/>
				</Controller_Sequence>
			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- 100% Opportunist in principle-->
	<AIArmyMissionDefinition Name="PacifyFirstRegion">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$RegionIndex"/>
			<Parameter ParameterIndex="1" VarName="$VillageToDestroy"/>
		</Parameters>
		<Controller_Sequence Debug="PacifyFirstRegion_Root">

			<!-- If army locked, wait some.-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$VillageToDestroy"/>
			<Decorator_GetTargetPosition TargetVarName="$VillageToDestroy" Output_DestinationVarName="$VillagePosition"/>
			<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

			<Controller_Selector>
				<!-- First, try to locate any army around. -->
				<!-- Then, try to locate any village around. -->
				<Controller_Sequence Debug="PacifyFirstRegion_TryToDestroyVillage">
					<Decorator_CheckPositionVisibility PositionVarName="$VillagePosition"/>

					<Action_GeneratePath DestinationVarName="$VillagePosition" TypeOfPath="Regular" Output_PathVarName="$PathToVillage"/>
					<Decorator_CheckPathLength PathVarName="$PathToVillage" Value="5" CheckOperation="Lesser"/>

					<Controller_Selector>
						<Controller_Sequence Debug="PacifyFirstRegion_DestroyVillage">
							<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
							<Action_Attack TargetVarName="$VillageToDestroy"/>
						</Controller_Sequence>

						<Action_GotoAndAttack PathVarName="$PathToVillage" TypeOfMove="Regular" TargetVarName="$VillageToDestroy"/>
					</Controller_Selector>
				</Controller_Sequence>

				<!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>


        <!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyWildKaiju"/>

        <!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyTamedKaiju"/>
        
				<!--IF City need vision for spy THEN explore Ruin-->
				<Controller_Sequence Debug="Opportunity_CityToSpy">
					<Decorator_SelectCityLookAtToInfiltrate TargetListVarName="$TargetList" Output_TargetVarName="$CityToLookAtTarget"/>
					<Decorator_GetTargetPosition TargetVarName="$CityToLookAtTarget" Output_DestinationVarName="$CityToLookAtWorldPositionDestination"/>
					<Decorator_EvaluateOpportunity OpportunityPosition="$CityToLookAtWorldPositionDestination" OpportunityType="CityToSpy" 
                                                   MainTargetPosition="$VillagePosition" 
                                                   MainTargetType="Village" MinimumTurnToObjectif="2" MaximumDetourTurn="1"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_CityToSpy_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfCheck="Attack"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="Opportunity_CityToSpy_MoveToRuin">
							<Action_GeneratePath DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$CityToSpyPath"/>
							<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$CityToLookAtWorldPositionDestination" PathVarName="$CityToSpyPath"/>
							<Action_Move PathVarName="$CityToSpyPath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$CityToSpyPath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<!-- Finally move To the village to attack. -->
				<Controller_Sequence Debug="PacifyFirstRegion_GoToVillage">
					<Controller_Selector>
						<Controller_Sequence Debug="PacifyFirstRegion_GoToVillage_EndingCondition">
							<Decorator_VariableCheck VarName="$VillagePosition" CheckOperation="Exists"/>
							<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
							<Action_Attack TargetVarName="$VillageToDestroy"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="PacifyFirstRegion_GoToVillage_GoToPreviousTarget">
							<Decorator_VariableCheck VarName="$VillagePosition" CheckOperation="Exists"/>
							<Action_GeneratePath DestinationVarName="$VillagePosition" TypeOfPath="Regular" Output_PathVarName="$Path"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="PacifyFirstRegion_GoToVillage_GetTarget">
							<Decorator_GetTargetPosition TargetVarName="$VillageToDestroy" Output_DestinationVarName="$VillagePosition"/>
							<Action_GeneratePath DestinationVarName="$VillagePosition" TypeOfPath="Regular" Output_PathVarName="$Path"/>
						</Controller_Sequence>
					</Controller_Selector>

					<Controller_Sequence Debug="PacifyFirstRegion_Move">
						<Decorator_VariableCheck VarName="$Path" CheckOperation="Exists"/>
						<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
						<Decorator_MoveEnded PathVarName="$Path"/>
						<Decorator_DestinationReached DestinationVarName="$VillagePosition" TypeOfCheck="Regular"/>
					</Controller_Sequence>

				</Controller_Sequence>

			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- Opportunist when convenient -->
	<AIArmyMissionDefinition Name="DestroyVillage">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$Village"/>
			<Parameter ParameterIndex="1" VarName="$RegionIndex"/>
		</Parameters>
		<Controller_Sequence Debug="DestroyVillage_Root">

			<!--IF Army locked (in battle) THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Village"/>
			<Decorator_GetTargetPosition TargetVarName="$Village" Output_DestinationVarName="$WorldPositionDestination"/>
		    <Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList" RegionRestriction="$RegionIndex"/>

			<Controller_Selector Debug="DestroyVillage_Root2">

				<Controller_Sequence Debug="DestroyVillage_EngageVillage">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_Attack TargetVarName="$Village"/>
				</Controller_Sequence>

				<!--IF EnnemyDetected AND I can defeat him THEN Engage him-->
        <Include SubTreeName="TryToAttackEnemyInRange"/>

        <!--IF WILD Kaiju Detected, and can cost luxury tame, THEN tray to tame it-->
        <Include SubTreeName="TryLuxuryTameNearbyKaiju"/>
        
        <!--IF Wild and Unstunned Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyWildKaiju"/>

        <!--IF Tamed Kaiju Detected AND can defeat it THEN tray to attack it-->
        <Include SubTreeName="TryAttackNearbyTamedKaiju"/>

        
        <!--IF RuinDetected THEN explore Ruin-->
				<Include SubTreeName="OpportunitySearchRuin">
					<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
					<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>                
				</Include>      

				<!--IF City need vision for spy THEN explore Ruin-->
				<Controller_Sequence Debug="Opportunity_CityToSpy">
					<Decorator_SelectCityLookAtToInfiltrate TargetListVarName="$TargetList" Output_TargetVarName="$CityToLookAtTarget"/>
					<Decorator_GetTargetPosition TargetVarName="$CityToLookAtTarget" Output_DestinationVarName="$CityToLookAtWorldPositionDestination"/>
					<Decorator_EvaluateOpportunity OpportunityPosition="$CityToLookAtWorldPositionDestination" 
                                                   OpportunityType="CityToSpy" 
                                                   MainTargetPosition="$WorldPositionDestination" 
                                                   MainTargetType="Village" MinimumTurnToObjectif="2" MaximumDetourTurn="1"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_CityToSpy_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfCheck="Attack"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="Opportunity_CityToSpy_MoveToRuin">
							<Action_GeneratePath DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$CityToSpyPath"/>
							<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$CityToLookAtWorldPositionDestination" PathVarName="$CityToSpyPath"/>
							<Action_Move PathVarName="$CityToSpyPath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$CityToSpyPath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<Controller_Sequence Debug="DestroyVillage_MoveTowardVillageToEngage">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path"/>

					<Controller_Selector Debug="DestroyVillage_MoveAndEngageOrMove">

						<Controller_Sequence Debug="DestroyVillage_MoveToward">
							<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$Path"/>
							<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
							<Action_Attack TargetVarName="$Village"/>
						</Controller_Sequence>

					</Controller_Selector>
				</Controller_Sequence>
			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- Not Opportunist at all-->
	<AIArmyMissionDefinition Name="ConvertToPrivateers">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetCity"/>
		</Parameters>
		<Controller_Sequence Debug="ConvertToPrivateers_Root">

			<!--IF Army locked (in battle) THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$TargetCity"/>
			<!--<Decorator_GetTargetPosition TargetVarName="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/>-->
		    <!--<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList" RegionRestriction="$RegionIndex"/>-->

			<Controller_Selector Debug="ConvertToPrivateers_Root2">
				<!-- Not a privateers army? go to the closest region of the same empire and convert there-->
				<Controller_Sequence Debug="ConvertToPrivateers_ArmyIsNotPrivateer">
					<Decorator_IsPrivateersArmy Inverted="true" TargetVarName="$Army"/>

					<!--Go to nearest city of the same empire and convert to a Privateers Army-->
					<Controller_Sequence Debug="ConvertToPrivateers_TryToConvert">
						<!-- Ask for a destination. -->
						<Controller_Selector>
							<Controller_Sequence Debug="ConvertToPrivateers_TryConvertToPrivateers">
								<Decorator_GetConvertToPrivateersTargetPosition Output_DestinationVarName="$ConvertDestination"/>
								<Decorator_DestinationReached DestinationVarName="$ConvertDestination" TypeOfCheck="Regular"/>
								<Action_ConvertToPrivateers />
							</Controller_Sequence>

							<Controller_Sequence Debug="ConvertToPrivateers_GoToDestination">

								<Controller_Selector>
									<Controller_Sequence Debug="ConvertToPrivateers_ConvertTargetReached">
										<Decorator_VariableCheck VarName="$ConvertDestination" CheckOperation="Exists"/>
										<Decorator_GetConvertToPrivateersTargetPosition Output_DestinationVarName="$ConvertDestination"/>
										<Decorator_DestinationReached DestinationVarName="$ConvertDestination" TypeOfCheck="Regular"/>
										<Action_ConvertToPrivateers />
									</Controller_Sequence>

									<Controller_Sequence Debug="ConvertToPrivateers_GoToConvertTarget">
										<Decorator_VariableCheck VarName="$ConvertDestination" CheckOperation="Exists"/>
										<Action_GeneratePath DestinationVarName="$ConvertDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
									</Controller_Sequence>

									<Controller_Sequence Debug="ConvertToPrivateers_FirstTime">
										<Decorator_GetConvertToPrivateersTargetPosition Output_DestinationVarName="$ConvertDestination"/>
										<Action_GeneratePath DestinationVarName="$ConvertDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
									</Controller_Sequence>

								</Controller_Selector>

								<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
								<Decorator_MoveEnded PathVarName="$Path"/>
								<Decorator_DestinationReached DestinationVarName="$ConvertDestination" TypeOfCheck="Regular"/>
							</Controller_Sequence>

						</Controller_Selector>
					</Controller_Sequence>

				</Controller_Sequence>

				<!-- Is a privateers army? Sucess-->
				<Controller_Sequence Debug="ConvertToPrivateers_ArmyIsPrivateer">
					<Decorator_IsPrivateersArmy Inverted="false" TargetVarName="$Army"/>
				</Controller_Sequence>
			</Controller_Selector>

		</Controller_Sequence>
	</AIArmyMissionDefinition>

  <AIArmyMissionDefinition Name="Terraform">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$RegionIndex"/>
      <Parameter ParameterIndex="1" VarName="$TerraformPosition"/>
      <Parameter ParameterIndex="2" VarName="$DeviceDefinitionName"/>
    </Parameters>
    <Controller_Sequence Debug="TerraformRoot_Root">

      <!-- If army locked, wait some.-->
      <Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>

      <Controller_Selector>
        
        <!--IF RuinDetected THEN explore Ruin-->
        <Include SubTreeName="OpportunitySearchRuin">
          <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$TerraformPosition"/>
          <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
        </Include>

        <!--IF we could collect orbs THEN Change path -->
        <Include SubTreeName="OrbsOpportunity">
          <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$TerraformPosition"/>
          <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="0"/>
        </Include>

        <!--IF City need vision for spy THEN explore Ruin-->
        <Controller_Sequence Debug="Opportunity_CityToSpy">
          <Decorator_SelectCityLookAtToInfiltrate TargetListVarName="$TargetList" Output_TargetVarName="$CityToLookAtTarget"/>
          <Decorator_GetTargetPosition TargetVarName="$CityToLookAtTarget" Output_DestinationVarName="$CityToLookAtWorldPositionDestination"/>
          <Decorator_EvaluateOpportunity OpportunityPosition="$CityToLookAtWorldPositionDestination"
                                                   OpportunityType="CityToSpy"
                                                   MainTargetPosition="$VillagePosition" MainTargetType="City"
                                                   MinimumTurnToObjectif="2" MaximumDetourTurn="1"/>

          <Controller_Selector>
            <Controller_Sequence Debug="Opportunity_CityToSpy_AlreadyAtDestination">
              <Decorator_DestinationReached DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfCheck="Attack"/>
            </Controller_Sequence>

            <Controller_Sequence Debug="Opportunity_CityToSpy_MoveToRuin">
              <Action_GeneratePath DestinationVarName="$CityToLookAtWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$CityToSpyPath"/>
              <Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$CityToLookAtWorldPositionDestination" PathVarName="$CityToSpyPath"/>
              <Action_Move PathVarName="$CityToSpyPath" TypeOfMove="Regular"/>
              <Decorator_MoveEnded PathVarName="$CityToSpyPath"/>
            </Controller_Sequence>
          </Controller_Selector>
        </Controller_Sequence>
        
        <!-- IF Destination reached, THEN terraform -->
        <Controller_Sequence Debug="Terraform">
          <Decorator_DestinationReached DestinationVarName="$TerraformPosition" TypeOfCheck="Regular"/>
          <Action_Terraform DeviceDefinitionName="$DeviceDefinitionName"/>
        </Controller_Sequence>

        <!--IF not in range move to destination fist -->
        <Controller_Sequence Debug="MoveToDestinationAndTerraform">
          <Action_GeneratePath DestinationVarName="$TerraformPosition" TypeOfPath="Regular" Output_PathVarName="$Path"/>
          <Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
          <Decorator_MoveEnded PathVarName="$Path" TypeOfCheck="Regular"/>
          <Decorator_DestinationReached DestinationVarName="$TerraformPosition" TypeOfCheck="Regular"/>
          <Action_Terraform DeviceDefinitionName="$DeviceDefinitionName"/>
        </Controller_Sequence>

        
      </Controller_Selector>

    </Controller_Sequence>

  </AIArmyMissionDefinition>


  <!--LesserAttackCity is not opportunist it will only targets the city without attacking any army -->
	<AIArmyMissionDefinition Name="LesserAttackCity">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetCity"/>
			<Parameter ParameterIndex="1" VarName="$SiegeTurnsNumber"/>
		</Parameters>

		<Controller_Sequence Debug="LesserAttackCity_Root">

			<!--IF Army in under control THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>

			<Decorator_GetTargetPosition TargetVarName="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/>

			<!-- based on target type don't do the same stuff-->
			<Controller_Selector Debug="LesserAttackCity_Root2">
				<Controller_Sequence Debug="Lesser_AttackCity">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Controller_Selector Debug="LesserAttackCity_TryAttackOrSiegeCity">
						<Controller_Sequence Debug="LesserAttackCity_TryAttackCity_CanAttack">
							<Decorator_CityInteractionCheck CityInteractionType="Attack" TargetVarName="$TargetCity" SiegeTurnsNumberVarName="$SiegeTurnsNumber"/>
							<Controller_Selector Debug="LesserAttackCity_TryAttackCity_Attack">
								<Controller_Sequence Debug="LesserAttackCity_TryAttackCity_CanAttack_RemoveSiege">
									<Decorator_IsTargetBesieging Inverted="false" TargetVarName="$Army" TargetCityVarName="$TargetCity"/>
									<Action_Attack TargetVarName="$TargetCity"/>
								</Controller_Sequence>

								<Action_Attack TargetVarName="$TargetCity"/>
							</Controller_Selector>

						</Controller_Sequence>

						<Controller_Sequence Debug="LesserAttackCity_TryAttackCity_CanSiege">
							<Decorator_CityInteractionCheck CityInteractionType="Siege" TargetVarName="$TargetCity" SiegeTurnsNumberVarName="$SiegeTurnsNumber"/>
							<Decorator_IsTargetBesieging Inverted="true" TargetVarName="$Army" TargetCityVarName="$TargetCity"/>
							<Action_ToggleSiege TargetVarName="$TargetCity" State="On"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="LesserAttackCity_TryAttackCity_Wait">
							<Decorator_VariableCheck VarName="$TargetCity" CheckOperation="Exists"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<Controller_Sequence Debug="LesserAttackCity_MoveTowardTarget">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
				</Controller_Sequence>
				
				<!--ELCP: LastResortRoaming if no valid path has been found-->		
				<Controller_Sequence Debug="LastResortRoaming">
					<Decorator_GetTargetPosition TargetVarName="$Army" Output_DestinationVarName="$MyPosition"/>
					<Decorator_GetNextRoamingPosition PositionVarName="$MyPosition" Output_DestinationVarName="$BorderDestination" LastResort="true"/>
					<Action_GeneratePath DestinationVarName="$BorderDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path" TypeOfCheck="Regular"/>
				</Controller_Sequence>	
			</Controller_Selector>
		</Controller_Sequence>

	</AIArmyMissionDefinition>

	<!-- Minor besiege city only. -->

	<!-- Opportunist when its convenient-->
	<AIArmyMissionDefinition Name="MinorOnlyBesiegeCity">
		<Parameters>
			<Parameter ParameterIndex="0" VarName="$TargetCity"/>
		</Parameters>
		<Controller_Sequence Debug="BesiegeCity_Root">

			<!--IF Army in under control THEN Mission failed-->
			<Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>

			<Decorator_GetTargetPosition TargetVarName="$TargetCity" Output_DestinationVarName="$WorldPositionDestination"/>

			<!-- Try to besiege the city. -->
			<Controller_Selector Debug="BesiegeCity_Selector">

				<!-- When we are already besieging and we can defeat the city, attack. -->
				<Controller_Sequence Debug="AlreadyAtTheBesiegedCity">
					<Decorator_IsTargetBesieging Inverted="false" TargetVarName="$Army" TargetCityVarName="$TargetCity"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
				</Controller_Sequence>

				<!-- When we are at destination, start the siege. -->
				<Controller_Sequence Debug="EngageCity">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_ToggleSiege TargetVarName="$TargetCity" State="On"/>
				</Controller_Sequence>

				<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>

				<!--IF EnnemyDetected AND I can defeat him THEN Engage him-->
				<Controller_Sequence Debug="BesiegeCity_TryToAttackEnemyInRange">
					<Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>
					<Decorator_SelectTarget TargetListVarName="$TargetList" TypeOfTarget="Army" TypeOfDiplomaticRelation="Enemy" Output_TargetVarName="$Target"/>
					<Decorator_CanDefeatTarget Inverted="false" TargetVarName="$Target"/>
					<Decorator_GetTargetPosition TargetVarName="$Target" Output_DestinationVarName="$AttackWorldPositionDestination"/>
					<Decorator_EvaluateOpportunity OpportunityPosition="$AttackWorldPositionDestination" OpportunityType="Army" MainTargetPosition="$WorldPositionDestination" MainTargetType="City"/>

					<Controller_Selector Debug="BesiegeCity_TryToAttackEnemyInRange_EnemyInRange">
						<Controller_Sequence Debug="BesiegeCity_TryToAttackEnemyInRange_EnemyClose">
							<Decorator_DestinationReached DestinationVarName="$AttackWorldPositionDestination" TypeOfCheck="Attack"/>
							<Action_Attack TargetVarName="$Target"/>
						</Controller_Sequence>

						<Controller_Sequence Debug="BesiegeCity_TryToAttackEnemyInRange_GotoAndAttack">
							<Action_GeneratePath DestinationVarName="$AttackWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$Path"/>
							<Decorator_CanReachPositionInTurn Inverted="false" DestinationVarName="$AttackWorldPositionDestination" PathVarName="$Path"/>
							<Action_GotoAndAttack TargetVarName="$Target" PathVarName="$Path"/>
							<Decorator_MoveEnded PathVarName="$Path"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<!--IF we could Pillage something THEN try to pillage it -->
				<Controller_Sequence Debug="Opportunity_Pillage">
					<Decorator_SelectPillageTarget TargetListVarName="$TargetList"
                                                   Output_TargetVarName="$PillageTarget"
                                                   OpportunityMainTargetPosition="$WorldPositionDestination"
                                                   OpportunityMaximumTurn="3"/>

					<Decorator_GetTargetPosition TargetVarName="$PillageTarget" Output_DestinationVarName="$PillageTargetWorldPositionDestination"/>

					<Controller_Selector>
						<Controller_Sequence Debug="Opportunity_Pillage_AlreadyAtDestination">
							<Decorator_DestinationReached DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfCheck="Attack"/>
							<Action_TogglePillage TargetVarName="$PillageTarget"/>
						</Controller_Sequence>

						<!-- Wait until we have ended the pillage! -->
						<Decorator_DestinationReached DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfCheck="Attack"/>

						<Controller_Sequence Debug="Opportunity_Pillage_MoveToTarget">
							<Action_GeneratePath DestinationVarName="$PillageTargetWorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$PillagePath"/>
							<Action_Move PathVarName="$PillagePath" TypeOfMove="Regular"/>
							<Decorator_MoveEnded PathVarName="$PillagePath"/>
						</Controller_Sequence>
					</Controller_Selector>
				</Controller_Sequence>

				<Controller_Sequence Debug="MoveTowardCity">
					<Action_GeneratePath DestinationVarName="$WorldPositionDestination" Output_PathVarName="$Path"/>
					<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$Path"/>
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>
					<Action_ToggleSiege TargetVarName="$TargetCity" State="On"/>
				</Controller_Sequence>

			</Controller_Selector>

		</Controller_Sequence>

	</AIArmyMissionDefinition>



  <AIArmyMissionDefinition Name="AttackAndTameKaijuDefault">
    <Parameters>
      <Parameter ParameterIndex="0" VarName="$TargetKaiju"/>
    </Parameters>
    <Controller_Sequence Debug="AttackAndTameKaijuDefault_Root">

      <!--IF Army in under control THEN Mission failed-->
      <Decorator_IsTargetLocked Inverted="true" TargetVarName="$Army"/>
	  <Decorator_IsTargetLocked Inverted="true" TargetVarName="$TargetKaiju"/>
      <Decorator_IsTargetBesieging Inverted="true" TargetVarName="$Army"/>
      <Decorator_GetTargetPosition TargetVarName="$TargetKaiju" Output_DestinationVarName="$WorldPositionDestination"/>
      <Decorator_GetTargetInRange Inverted="false" Output_TargetListVarName="$TargetList"/>

      <Controller_Selector Debug="AttackAndTameKaijuDefault_Selector">
		
		<Include SubTreeName="MapBoostOpportunity">
		   <VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
		   <NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>
		</Include>
		
		<Controller_Sequence Debug="DefendIfStillAtHome">
			<Decorator_IsInOwnRegion Inverted="false"/>
			<Include SubTreeName="DefendBesiegedCities"/>
		</Controller_Sequence>
		
		<Include SubTreeName="ExploreNearbyRuin"/>                
		<Include SubTreeName="OrbsOpportunity">
			<VariableConverter ToVariable="$MainTargetPosition" FromVariable="$WorldPositionDestination"/>
			<NumericConstant ToVariable="$OpportunityMaximumTurn" Value="1"/>
		</Include>
		
		
		<Include SubTreeName="TryToAttackEnemyInRangeOrIgnore"/>
		
		<!-- LEB: Wait for other armies of this commander if they are behind us, but only if we cant just tame the kaiju-->
		<Controller_Sequence>
			<Decorator_CanAffordArmyAction Inverted="true" ArmyActionReadOnlyName="ArmyActionTameUnstunnedKaiju" Output_ArmyActionVarName="$ArmyAction"/>
			
			<Controller_Selector>
				<Decorator_WaitForAllies TargetVarName="$TargetKaiju" Output_LeaderVarName="$LeadingArmy"/>	
				<!-- follow the leader if we arent it -->
				<Controller_Sequence>
					<Decorator_VariableCheck VarName="$LeadingArmy" CheckOperation="Exists"/>
					<Decorator_GetTargetPosition TargetVarName="$LeadingArmy" Output_DestinationVarName="$LeaderDestination"/>
					<Action_GeneratePath DestinationVarName="$LeaderDestination" Output_PathVarName="$LeaderPath" AllowFastTravel="true"/>
					<Action_Move PathVarName="$LeaderPath" TypeOfMove="Regular"/>
					<Decorator_MoveEnded PathVarName="$LeaderPath"/>
				</Controller_Sequence>
			</Controller_Selector>	
		</Controller_Sequence>	
		
		<!--ELCP: Reworked Kaijumission: Only directly engage it, if we can tame or beat it-->	
		<Controller_Sequence Debug="EngageKaijuIfValid">
			<Controller_Selector Debug="CheckIfKaijuValidTarget">
				<Decorator_CanAffordArmyAction Inverted="false" ArmyActionReadOnlyName="ArmyActionTameUnstunnedKaiju" Output_ArmyActionVarName="$ArmyAction"/>
				<Decorator_CanDefeatTarget Inverted="false" TargetVarName="$TargetKaiju" EvaluateArmyGroup="true"/>
				<Decorator_CanDefeatTarget Inverted="false" TargetVarName="$TargetKaiju"/>	
			</Controller_Selector>  
			
			<Controller_Selector Debug="EngageKaiju">
				<Controller_Sequence Debug="AttackAndTameKaijuDefault_MoveToKaijuTarget">
				  <Action_GeneratePath DestinationVarName="$WorldPositionDestination" TypeOfPath="Regular" Output_PathVarName="$NodePath" IgnoreArmies="true" AllowFastTravel="true"/>
				  <Action_Move PathVarName="$NodePath" TypeOfMove="Regular"/>
				  <Decorator_MoveEnded PathVarName="$NodePath"/>
				</Controller_Sequence>
				
				<Controller_Sequence Debug="AttackAndTameKaijuDefault_TameKaiju">
				  <Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>    
				  <Decorator_CanAffordArmyAction Inverted="false" ArmyActionReadOnlyName="ArmyActionTameUnstunnedKaiju" Output_ArmyActionVarName="$ArmyAction"/>
				  <Action_ExecuteArmyAction ArmyActionVarName="$ArmyAction" TargetVarName="$TargetKaiju"/>
				</Controller_Sequence>
				
				<Controller_Sequence Debug="AttackAndTameKaijuDefault_EngageKaiju">
					<Decorator_DestinationReached DestinationVarName="$WorldPositionDestination" TypeOfCheck="Regular"/>   
					<Controller_Selector Debug="CheckIfKaijuValidTarget">
						<Decorator_ArmyGroupInRange />
						<Decorator_CanDefeatTarget Inverted="false" TargetVarName="$TargetKaiju"/>	
					</Controller_Selector> 
					<Action_ImmolateUnits TargetVarName="$TargetKaiju" PowerRatioCeil="10.0" PowerRatioFloor="0.1"/>
					<Action_Attack TargetVarName="$TargetKaiju"/>                 
				</Controller_Sequence>
				
				<Decorator_Successor />
			</Controller_Selector>
		</Controller_Sequence>
		
        <!--ELCP: Reworked Kaijumission: If we cant beat it now, roam around in its region-->		
		<Controller_Sequence Debug="LastResortRoaming">
			<Decorator_GetNextRoamingPosition PositionVarName="$WorldPositionDestination" Output_DestinationVarName="$BorderDestination"/>
			<Action_GeneratePath DestinationVarName="$BorderDestination" TypeOfPath="Regular" Output_PathVarName="$Path" AllowFastTravel="true"/>
			<Action_Move PathVarName="$Path" TypeOfMove="Regular"/>
			<Decorator_MoveEnded PathVarName="$Path" TypeOfCheck="Regular"/>
		</Controller_Sequence>	
      
      </Controller_Selector>     
      
    </Controller_Sequence>
  </AIArmyMissionDefinition>

</Datatable>
